/******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
* File Name          : main.c
* Author             : MCD Application Team
* Version            : V1.0
* Date               : 10/08/2007
* Description        : Main program body
********************************************************************************
* THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
* WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
* CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
*******************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x.h"
#include <PlayMode.h>
#include "hardware_conf.h"
#include <stdio.h>
#include <string.h>

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/



u8   Rev_ok=0;
u8   exit_set=0;
extern u8  USRT_Buffer[7];
u16  Temperature,Weight;

//new defined valuable as below
u8  Heat;         // heat sign
u8  Warm;         // keep warm sign                
u8  Warmtemp;     // keep warm temp valuable
u8  Warmheat;     // heating inorder to keep warm sign
u8  CheckTime;    // 0.5S check a time
u8  ledstate;     // use led slight
u8  WarmEnable;   // can start warm operation£¨usually enable after heat complete£©
u8  HeatCRC;      // temp compare£¬after turn off heat device
u8  WaterTemp;    // real-time water temperature
u8  WaterWeight;
u8  CWaterWeight;
u8  HeatCRCStart; //start temp compare£¬after turn off heat device 15S
u16 HeatCRCTime;  //Timer, =0 start temp compare
u8  FirstCRC;     //
u8  Telecontrol;  //wifi Telecontrol
u8  Keycontrol;   // Keyboard operation
u16 LightHeatOffTime;
u8  WarmOK;
u32 WarmTime;
u8  Mystate,MystatePre;
u8  bFlagOK;
u8  TeaPotHub;
u8  Pre_TeaPotHub;
u8  Factor_Set_Sign;
u8  EnCool;
u8  EnSendHubState;
u16  TimeSendHubState;
u8  Connect_Service;
u8  FactorSign;
u8  cmdmode;
u16 DelayNum10ms;
u8  WifiConnectok=0;
u16 OffLineTime;
u16 Read_RequstTime;
u8  Read_Requst;
u8  Finish=0;
u16 FinishTime=0;
u8  StartTime=0;
u8  ModeReadOk=0;
u8  WifiMode=0;
u8  Keyend=0;
u8  App_OnLine=1;
u8  RelayOn=0;
u32 RelayOnTime;
u8  TryConnectWan=0;
u16 TryConnectWanTime=0;
u8  TimeSync=0;
u8  FirstPowerOn;
u8  Weight_Verf_Sign;
u16 WEIGHT_VERIFY;

  
u16  Pure_Time;
u8   SendTime=0;

u8 Purify=0;
u8 Boil=0;
u8 CommRcvBuf[512];
u8 UartSend_Buffer3[512];

u8 RecvWifiCmd[64];
u8 *RecvWifiCmdEnd;
u8 RcvDate[30];

u8 WaterWeight_tb[64];
u8 *WaterWeight_tbstart,*WaterWeight_tbend;
u8  adcok;

HeatInfo   OrderTable[16];
u8  Ordernum=0;

HeatRecord RecordTable[10];
u8  RecordNum=0;

u8  TeleWarmTime=0;
u8  PhoneID[37];
u8  LastTime[15]="20141021143005";
u8  MachineID[21]="01201410251835151111";
//uc8 MachineID_Default[21]="01888888888888888888";
uc8 MachineID_Default[21]="01010115021110123456";
u8  Orderid[17];
u8  Operation;
u16  StateTime=0;
u8  OrderOperState=0;

u8  TYear;
u8  TMon;
u8  TDay;
u8  THour;
u8  TMin;
u8  TSec;
u8  TWeek;
u32 SecondTime;
u8  UpdateState;
u8  wtmp,wtmppre;
u8  wtmp2=0;
u8  KeyEnable;


uc8  manual[37]={'m','a','n','u','a','l',};
/*uc16 Temp_Table[120]={163, 171, 179, 188, 197, 207, 217, 227, 238, 249,    //0~9¡æ
                      261, 273, 285, 298, 311, 325, 339, 354, 369, 385,    //10~19¡æ
                      401, 418, 435, 453, 471, 490, 510, 530, 550, 571,    //20~29¡æ
                      593, 615, 638, 661, 684, 708, 733, 758, 784, 810,    //30~39¡æ
                      837, 864, 891, 920, 948, 977, 1007,1037,1067,1097,   //40~49¡æ
                      1129,1160,1192,1224,1256,1289,1322,1355,1389,1422,   //50~59¡æ
                      1456,1490,1525,1559,1593,1628,1662,1696,1731,1765,   //60~69¡æ
                      1800,1835,1869,1903,1938,1972,2006,2040,2074,2107,   //70~79¡æ
                      2141,2172,2202,2232,2262,2292,2326,2359,2392,2425,   //80~89¡æ
                      2457,2488,2518,2547,2577,2605,2634,2661,2689,2716,   //90~99¡æ
                      2742,2768,2794,2819,2844,2869,2893,2917,2940,2963,   //100~109¡æ
                      2986,3008,3030,3051,3072,3092,3113,3133,3153,3172 }; //110~119¡æ*/



uc16 Temp_Table[126]={162,170,178,187,197,206,216,227,238,249,           //0~9¡æ
                      260,272,285,298,311,325,339,354,370,385,           //10_19¡æ
                      402,418,436,453,472,490,510,530,550,571,           //20_29¡æ
                      592,614,637,660,683,707,732,757,783,809,           //30_39¡æ
                      835,862,890,918,946,975,1004,1034,1064,1095,       //40_49¡æ
                      1126,1157,1189,1221,1253,1285,1318,1351,1384,1418, //50_59¡æ
                      1452,1485,1519,1554,1588,1622,1657,1691,1725,1760, //60_69¡æ
                      1794,1829,1863,1897,1932,1966,2000,2033,2067,2101, //70_79¡æ
                      2134,2167,2200,2232,2265,2297,2328,2360,2391,2422, //80_89¡æ
                      2452,2483,2512,2542,2571,2600,2628,2656,2684,2711, //90_99¡æ
                      2738,2765,2791,2816,2842,2867,2891,2915,2939,2962, //100_109¡æ
                      2985,3008,3030,3052,3073,3094,3114,3135,3154,3174, //110_119¡æ
                      3193,3212,3230,3248,3266,3283};                    //120_125¡æ

uc16 Weight_Table1[50]={  79, 158, 236, 315, 394, 473, 552, 630, 709, 788,  //0.1--1.0kg
                        867, 946,1024,1103,1182,1261,1340,1418,1497,1576,  //1.1--2.0kg
                       1655,1734,1813,1891,1970,2049,2128,2207,2285,2364,  //2.1--3.0kg
                       2443,2522,2601,2679,2758,2837,2916,2995,3073,3152,  //3.1--4.0kg
                       3231,3310,3389,3467,3546,3625,3704,3783,3861,3940,};//4.1--5.0kg

uc16 Weight_Table2[50]={39,79,118,158,197,236,276,315,355,394,
                       433,473,512,552,591,630,670,709,749,788,
                       827,867,906,946,985,1024,1064,1103,1143,1182,
                       1221,1261,1300,1340,1379,1418,1458,1497,1537,1576,
                       1615,1655,1694,1734,1773,1812,1852,1891,1931,1970,};

uc16 Weight_Table3[50]={52,104,157,209,261,313,366,418,470,522,
                       574,627,679,731,783,836,888,940,992,1044,
                       1097,1149,1201,1253,1306,1358,1410,1462,1514,1567,
                       1619,1671,1723,1775,1828,1880,1932,1984,2037,2089,
                       2141,2193,2245,2298,2350,2402,2454,2507,2559,2611,};

uc16 Weight_Table[50]={211,243,275,307,339,371,403,435,467,499,
                       535,570,605,640,680,715,750,785,819,
                       851,883,915,947,979,1011,1043,1449,1499,
                       1549,1599,1649,1699,1749,1799,1849,1899,1949,1999,
                       2049,2099,2149,2199,2249,2299,2349,2399,2449,2499,2549,};


uc8 TempTable5[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,38,40,41,43,44,
46,47,49,50,52,54,54,56,58,60,
61,62,63,64,65,66,67,68,69,70,
71,72,73,74,75,76,77,78,79,80,
81,82,83,84,85,86,87,88,89,90,
91,92,93,93,94,94,94,95,95,96,
96,97,98,98,99,99,100,100,100,100};


uc8 TempTable6[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,37,39,41,43,44,
45,46,48,50,51,53,54,55,56,58,
59,60,61,62,63,64,65,66,67,68,
69,70,71,72,73,74,75,76,77,78,
79,80,81,82,83,84,85,86,87,88,
89,90,91,91,92,92,93,94,94,95,
96,96,97,98,99,99,100,100,100,100};

uc8 TempTable7[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,37,39,41,43,44,
45,46,48,50,51,52,53,54,55,57,
58,59,60,61,62,63,64,65,66,67,
68,69,70,71,72,73,74,75,76,77,
78,79,80,81,82,83,84,85,86,87,
88,89,90,90,91,92,92,93,94,94,
95,96,97,98,98,99,99,100,100,100};

uc8 TempTable8[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,37,39,41,43,44,
45,46,47,48,50,51,52,53,54,55,
56,57,58,59,60,61,62,63,64,65,
66,67,68,69,70,71,72,73,74,75,
76,77,78,79,80,81,82,83,84,85,
86,87,88,89,90,90,91,92,92,93,
94,95,96,97,98,98,99,99,100,100};

uc8 TempTable9[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,37,39,41,43,44,
45,46,47,48,49,50,51,52,53,54,
55,56,57,58,59,60,61,62,63,64,
65,66,67,68,69,70,71,72,73,74,
75,76,77,78,79,80,81,82,83,84,
85,86,87,88,89,90,90,91,92,92,
93,94,95,96,97,98,98,99,100,100};

//10=11
uc8 TempTable10[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,37,39,41,43,44,
45,46,47,48,49,50,51,52,53,54,
55,56,57,58,59,60,61,61,62,63,
64,65,66,67,68,69,70,71,72,73,
74,75,76,77,78,79,80,81,82,83,
84,85,86,87,88,89,90,91,91,92,
93,94,95,96,97,98,98,99,100,100};

//12=13
uc8 TempTable12[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,38,40,42,43,
44,45,46,47,48,49,50,51,52,53,
54,55,56,57,58,59,60,60,61,62,
63,64,65,66,67,68,69,70,71,72,
73,74,75,76,77,78,79,80,81,82,
83,84,85,86,87,88,89,90,91,92,
92,93,94,95,96,97,98,99,100,100};

//14=15
uc8 TempTable14[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,40,41,
42,43,44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,59,60,61,
62,63,64,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,80,81,
82,83,84,85,86,87,88,89,90,91,
92,93,94,95,96,97,98,99,99,100};


//  >=16
uc8 TempTable16[101]={0,1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,
51,52,53,54,55,56,57,58,59,60,
61,62,63,64,65,66,67,68,69,70,
71,72,73,74,75,76,77,78,79,80,
81,82,83,84,85,86,87,88,89,90,
91,92,93,94,95,96,97,98,99,100};

uc8 TableObj[16]={0,0,0,0,0,1,1,1,1,2,2,2,3,3,3,4};
uc8 Table_L[18]={10,10,10,10,10,10,8,7,5,4,3,3,2,2,1,1,0,0};
uc8 Table_H[18]={10,10,10,9,7,5,4,4,3,2,2,2,1,1,1,1,0,0};

//new defined valuable as up

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

u16 ADC_ConvertedValue[64];
u8  NumberOfAD=0;

u16 adcconvertime=0;


/* Private function prototypes -----------------------------------------------*/
void RCC_Configuration(void);
void GPIO_Configuration(void);
void NVIC_Configuration(void);
void USART_Configuration(void);
void RTC_Configuration(void);
void Init_ADC(void);
void IWDG_Configuration(void);
void Leddisp(u8 tempvalue,u8 state);
void Init_Exit(void);
//u8 TempAdjust(u8 temp);
void ADConverData(void);
void Heat_Offline(void);
void Heat_Online(void);
void CommProc3(void);
void DataReturn(u8 num);
static int get_parmer(unsigned char *str,unsigned char *name,unsigned char *context,unsigned char chr);
static int get_telparmer(unsigned char *str,unsigned char *name,unsigned char *context,unsigned char chr);
void Rst_Value(void);
void http_send(u8 *sendbuf,u8 *path);
void DelayN10ms(u16 time);
void set_mode(u8 mode);
void WaitConnect(void);
void Tel_scan(void);
void CheckOrder(void);
void TIMER3_Init();
u16 AD_sysGetAdcResult(u8 Channel);
void Get_ADC_Value(void);
u8 TempRef(u8 tempnow);
u8 ObjVref(u8 tempobj);
/* Private functions ---------------------------------------------------------*/

void Init_Value(void)
{
  u8 i;
  Heat=0;      // heat sign
  Warm=0;      // keep warm sign                
  Warmtemp=0;  // keep warm temp valuable
  Warmheat=0;
  CheckTime=0;
  ledstate=1;
  WarmEnable=0;
  EnCool=0;
  HeatCRC=0;
  Temperature=0;
  WaterTemp=0;
  WaterWeight=0;
  HeatCRCStart=0;
  HeatCRCTime=0;
  FirstCRC=0;
  Telecontrol=0;
  Keycontrol=0;
  LightHeatOffTime=0;
  WarmOK=0;
  WarmTime=0;
  Pure_Time=0;
  adcok=0;
  Mystate=0;
  MystatePre=0;
  bFlagOK=0;
  TeaPotHub=0;
  Pre_TeaPotHub=0;
  //memset(OrderTable,0,sizeof(HeatInfo)*16);
  memset(RecordTable,0,sizeof(HeatRecord)*10);  //Orderid
  memcpy(PhoneID,manual,37);
  memset(Orderid,0,17);
  Factor_Set_Sign=0;
  EnSendHubState=0;
  TimeSendHubState=0;
  RecvWifiCmdEnd=RecvWifiCmd;
  cmdmode=0;
  DelayNum10ms=0;
  FirstPowerOn=1;
  App_OnLine=1;
  Weight_Verf_Sign=0;
  wtmp=0;
  wtmppre=0;
   
  TYear=10;
  TMon=1;
  TDay=1;
  THour=8;
  TMin=0;
  TSec=0;
  TWeek=5;  
  SecondTime=THour*3600;  
  UpdateState=0;
  KeyEnable=30;

  for(i=0;i<64;i++)
  {
    WaterWeight_tb[i]=0;
  }
  WaterWeight_tbstart=WaterWeight_tbend=WaterWeight_tb;  
}
/*******************************************************************************
* Function Name  : main
* Description    : Main program
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

int main(void)
{
  u8  i;
  u16 j;
  u8 str_tmp[4];
  u16  Flash_tmp[4];

#ifdef DEBUG
  debug();
#endif
  /* Init_Value --------------------------------------------------------------*/
  //SystemReset:
  Init_Value();  
  /* System clocks configuration ---------------------------------------------*/
  RCC_Configuration();  
  /* NVIC configuration ------------------------------------------------------*/
  NVIC_Configuration();
  /* GPIO configuration ------------------------------------------------------*/
  GPIO_Configuration();  
  WIFI_PWR(1);
  WifiLedCtl(0);
  LightHeatOffTime=LIGHT_HEAT_OFF_TIME;  
  /* USART_Configuration -----------------------------------------------------*/
  USART_Configuration();  
  TIMER3_Init(); 
  /* Configure the systick -----------10mS------------------------------------*/
  SysTick_Config(SYSTIME);  
  /* IWDG_Configuration ------------------------------------------------------*/
  IWDG_Configuration();  
  /* Delay_Configuration -----------------------------------------------------*/
  //delay_init(72);  
  /* ADC_DMA_Configuration ---------------------------------------------------*/
  Init_ADC();  
  Init_Exit();    
  //RTC_Configuration();  
  /*read machine id*/
  read_flash(ID_START_ADDR,(u16 *)MachineID,20);
  MachineID[20]=0;
  if((MachineID[0]>0x80) || (MachineID[0]<1))
  {
    memcpy(MachineID,MachineID_Default,21);    
  }  
  /*read weight verf value*/
  read_flash(WEIGHT_VERF_ADDR,Flash_tmp,4);
  WEIGHT_VERIFY=Flash_tmp[0];  
  if(WEIGHT_VERIFY>3500 || WEIGHT_VERIFY<1)
  {
      Flash_tmp[0]=WEIGHT_VERIFY_DEFAULT;
      Flash_tmp[1]=WEIGHT_VERIFY_DEFAULT;
      WEIGHT_VERIFY=WEIGHT_VERIFY_DEFAULT;
      write_flash(WEIGHT_VERF_ADDR,Flash_tmp,4);      
  }    
  /*read factor sign*/
  read_flash(FACTOR_START_ADDR,(u16 *)str_tmp,4);
  FactorSign=str_tmp[0];  
  
  /* »Ö¸´³ö³§Ê±½øÈë*/
  if(FactorSign>0)
  {
    WifiLedCtl(1);
    memset(OrderTable,0,992);
    write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
    
    DelayN10ms(700);
    UART3_Send_Missage("at+xcmd_req::cmd=sockset,id=0,mode=1,lport=8080,rhost=192.168.2.3,rport=5000,");
    DelayN10ms(100);
    
    UART3_Send_Missage("at+xcmd_req::cmd=sockset,id=1,mode=2,lport=5000,rhost=api.sunyie.com,rport=8081,xopt=3,");
    DelayN10ms(900);

    UART3_Send_Missage("at+xcmd_req::cmd=smartconfig,");
    DelayN10ms(20);    
  }
  
  /*read order data*/
  read_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
  j=0;
  for(i=0;i<16;i++)
  {
    if(OrderTable[i].Warmtemp==0)
    {
      j=1;
      Ordernum=i;
      break;
    }
    
  }
  if(j==0)
    Ordernum=15;  
  
  /****Á¬½Ó×´Ì¬***/
  if(FactorSign==0)
  {
    DelayN10ms(500);    
    //WaitConnect();
  }
  /*******/
  cmdmode=0;
  if(FactorSign==0)
    Connect_Service=1;
  else
    Connect_Service=0;
  
  SysTick_Config(SYSTIME);
  
  bFlagOK=0;
#if 1
  OffLineTime=OFF_LINE_TIME;
  
  while(1)
  {
    if(FactorSign>0 || Connect_Service==1)
    {
      WifiLedCtl(1);
    }
    else
      WifiLedCtl(0);
    /* 1¡¢conver ADC to the water temp¡¢WaterWeight         */  
    Get_ADC_Value();
    ADConverData();     
    
    if(EnSendHubState==1)
    {
      EnSendHubState=0;
      WaterWeight=CWaterWeight;
      //WaterWeight=10;      
      if(Connect_Service==0)
          DataReturn(5);
      else
      {
          //memset(CommRcvBuf,0,512);
          DataReturn(3);
          bFlagOK=0;
          DelayNum10ms=200;
          while(bFlagOK==0)
          {
            if(DelayNum10ms==0)
              break;
          }
          DelayNum10ms=0;
          if(bFlagOK==1)
          {
             bFlagOK=0;
             OffLineTime=OFF_LINE_TIME;
          }
          else   //µÚ¶þ´Î
          {
            //memset(CommRcvBuf,0,512);
            bFlagOK=0;
            DataReturn(3);
            //bFlagOK=0;
            DelayNum10ms=200;
            while(bFlagOK==0)
            {
              if(DelayNum10ms==0)
                break;
            }
            DelayNum10ms=0;
            if(bFlagOK==1)
            {
              bFlagOK=0;
              OffLineTime=OFF_LINE_TIME;
            }
          }
      }      
    }
        
    /* 2¡¢get service request   */  
    if(Connect_Service==1)
    {
      if(TimeSendHubState==0)
        Tel_scan();
    }
    if(Connect_Service>1)  
    {
      __set_FAULTMASK(1);      // ¹Ø±ÕËùÓÐÖÐ¶Ë 
      NVIC_SystemReset();      // ¸´Î» 
    }
    else if(TimeSync==1) /* time syns in lan*/
    {
      TimeSync=0;
      DataReturn(7);
    } 
     
    if(Telecontrol==1 || Keycontrol==1)
      App_OnLine=1;
        
    /* 3¡¢Heating the water when enable heat & teapot is hub Through Keyboard operation  */
    Heat_Offline();    
    
    /* 4¡¢Heating the water when enable heat & teapot is hub Through Wifi Telecontrol    */
    Heat_Online();      
    
    /* 5¡¢Mystate check */
    if(Mystate!=MystatePre)
    {
      MystatePre=Mystate;
      StateTime=0;
      if(Mystate==0 && Keyend==1)  //°´¼ü½áÊø
      {
              Keyend=0;
              if(Connect_Service==0)
                DataReturn(5);
              else
              {
                  //memset(CommRcvBuf,0,512);
                  DelayN10ms(20);
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }                  
                  else   //µÚ¶þ´Î
                  {
                    //memset(CommRcvBuf,0,512);
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }
              }              
              //memset(PhoneID,0,37);
              memcpy(PhoneID,manual,37);
      }
    }    
    
    /* Uart3 receve data process */
    CommProc3();    
    /* Check Order */
    CheckOrder();    
    /* Factor_Set_Sign */
    if(Factor_Set_Sign==1)
    {
      u8 temp[8];
      Factor_Set_Sign=0;
      for(i=0;i<8;i++)
          temp[i]=0x01;
      write_flash(FACTOR_START_ADDR,(u16 *)temp,4); 
      Speak(1);
      DelayN10ms(150);
      Speak(0);
      __set_FAULTMASK(1);      // ¹Ø±ÕËùÓÐÖÐ¶Ë 
      NVIC_SystemReset();      // ¸´Î» 
      //goto SystemReset;
    } 
    /* Try to connect WAN */ 
    if(TryConnectWan==1 && Connect_Service==0)
    {
      TryConnectWan=0;            
      Connect_Service=1;
      DelayN10ms(20);
      memset(CommRcvBuf,0,512);
      bFlagOK=0;
      DataReturn(3);
      bFlagOK=0;
      DelayNum10ms=200;
      while(bFlagOK==0)
      {
        if(DelayNum10ms==0)
          break;
      }
      DelayNum10ms=0;      
      
      if(bFlagOK==1)  // ÍâÍøÓÐ·µ»Ø
      {
         bFlagOK=0;
         OffLineTime=OFF_LINE_TIME;
         Connect_Service=1;
         TimeSync=1;
      }
      else           // ÍâÍøÎÞ·µ»Ø
      {
        Connect_Service=0;
        TryConnectWanTime=CONNECT_WAN_TIME;
      }      
    }   
    
    /* ¿ÕÏÐÊ±£¬Ã¿¸ô1·ÖÖÓ¸üÐÂÒ»ÏÂË®ºøµÄ×´Ì¬*/
    if(UpdateState==1)
    {
      UpdateState=0;
      if(Telecontrol==0 && Keycontrol==0)
      {
      
        if(Connect_Service==0)
        {
          DataReturn(5);
        }
        else
        {
            //memset(CommRcvBuf,0,512);
            DelayN10ms(20);
            DataReturn(3);
            bFlagOK=0;
            DelayNum10ms=200;
            while(bFlagOK==0)
            {
              if(DelayNum10ms==0)
                break;
            }
            DelayNum10ms=0;
            if(bFlagOK==1)
            {
               bFlagOK=0;
               OffLineTime=OFF_LINE_TIME;
            }                  
            else   //µÚ¶þ´Î
            {
              //memset(CommRcvBuf,0,512);
              bFlagOK=0;
              DataReturn(3);
              bFlagOK=0;
              DelayNum10ms=200;
              while(bFlagOK==0)
              {
                if(DelayNum10ms==0)
                  break;
              }
              DelayNum10ms=0;
              if(bFlagOK==1)
              {
                bFlagOK=0;
                OffLineTime=OFF_LINE_TIME;
              }
            }
          }
        }
      }    
  }
#endif
}

/*******************************************************************************
* Function Name  : RCC_Configuration
* Description    : Configures the different system clocks.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
  ErrorStatus HSEStartUpStatus;
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);

    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1);

    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1);

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);

    /* ADCCLK = PCLK2/2 */
    RCC_ADCCLKConfig(RCC_PCLK2_Div4);

    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);

    /* Wait till PLL is ready */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
    {
    }
    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08)
    {
    }
  }

/* Enable peripheral clocks --------------------------------------------------*/


  /* Enable ADC1 and GPIOC clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  
  /* Enable DMA clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
  
  /* Enable GPIOA, GPIOB, and AFIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO | RCC_APB2Periph_USART1, ENABLE);
  
   /* Enable SPI2 clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 | RCC_APB1Periph_USART3,ENABLE);

  /* TIM2 clocks enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
}

/*******************************************************************************
* Function Name  : GPIO_Configuration
* Description    : Configures the different GPIO ports.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
   
   /*power line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  GPIOA->BSRR = GPIO_Pin_15;

  /* PC0~PC5 => KEY1~KEY6 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* WifiLedCtl = PC11*/
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  GPIOC->BRR = GPIO_Pin_12;  

  /*LED: */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  GPIOB->BSRR= 0x7C00;
  GPIOB->BRR = 0x8000;
  //GPIOB->BRR = 0xFC00;
  /*SPKER*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_4;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  GPIOB->BRR=GPIO_Pin_5;
  GPIOB->BSRR=GPIO_Pin_4;  
  /*RELAY*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);	
  GPIOB->BRR=0x0060;
  /*ADC*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
  GPIO_Init(GPIOA, &GPIO_InitStructure);    
  /*USART1 PA9-TX,PA10-RX*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  /*REMAP USART3 PC10-TX,PC11-RX*/
  GPIO_PinRemapConfig(GPIO_PartialRemap_USART3,ENABLE);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
    
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
}

/**
  * @brief  Configures the USART1 controller.
  * @param  None
  * @retval None
  */

void USART_Configuration(void)
{
  USART_InitTypeDef USART_InitStructure;
  USART_ClockInitTypeDef  USART_ClockInitStructure;

  USART_InitStructure.USART_BaudRate =BAUD1;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl =   USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART1,& USART_InitStructure);

  USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
  USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
  USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
  USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;
  USART_ClockInit(USART1,& USART_ClockInitStructure);

  USART_Cmd(USART1, ENABLE);
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);  
  
  USART_InitStructure.USART_BaudRate =BAUD3;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl =   USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART3,& USART_InitStructure);

  USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
  USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
  USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
  USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;
  USART_ClockInit(USART3,& USART_ClockInitStructure);

  USART_Cmd(USART3, ENABLE);
  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
}

void Init_ADC(void)
{
  /*ADC_InitTypeDef ADC_InitStructure;
  DMA_InitTypeDef DMA_InitStructure;
  
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADC_ConvertedValue;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize =64;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA1_Channel1, &DMA_InitStructure);

  // Enable DMA channel1 
  DMA_Cmd(DMA1_Channel1, ENABLE);

  // ADC1 configuration ---¶ÀÁ¢¹¤×÷Ä£Ê½
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfChannel = 2;
  ADC_Init(ADC1, &ADC_InitStructure);

  // ADC1 regular channel2 configuration É¨ÃèË³Ðò¼°ÖÜÆÚ
  ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_55Cycles5);//temp
  ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 2, ADC_SampleTime_55Cycles5);//weight

  // Enable ADC1 DMA 
  ADC_DMACmd(ADC1, ENABLE);

  // Enable ADC1 
  ADC_Cmd(ADC1, ENABLE);

  //Enable ADC1 reset calibaration register 
  ADC_ResetCalibration(ADC1);
  // Check the end of ADC1 reset calibration register
  while(ADC_GetResetCalibrationStatus(ADC1));

  //Start ADC1 calibaration 
  ADC_StartCalibration(ADC1);
  //Check the end of ADC1 calibration 
  while(ADC_GetCalibrationStatus(ADC1));

  // Start ADC1 Software Conversion 
  ADC_SoftwareStartConvCmd(ADC1, ENABLE);*/  
  
  ADC_InitTypeDef ADC_InitStructure;
  
  /* ADC1 configuration ---¶ÀÁ¢¹¤×÷Ä£Ê½---------------------------------------------------*/
  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfChannel = 1;
  ADC_Init(ADC1, &ADC_InitStructure);
  /* Enable ADC1 */
  ADC_Cmd(ADC1, ENABLE);
  /* Enable ADC1 reset calibaration register */
  ADC_ResetCalibration(ADC1);
  /* Check the end of ADC1 reset calibration register */
  while(ADC_GetResetCalibrationStatus(ADC1));

  /* Start ADC1 calibaration */
  ADC_StartCalibration(ADC1);
  /* Check the end of ADC1 calibration */
  while(ADC_GetCalibrationStatus(ADC1));
  
}

u16 AD_sysGetAdcResult(u8 Channel)  
{
    u16 ad;
    ADC_RegularChannelConfig(ADC1, Channel, 1, ADC_SampleTime_55Cycles5);
    ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); 
    while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==0);
    ad = ADC_GetConversionValue(ADC1);
    return ad; 
}

void Delayms(u16 ms)
{
  u16 i,j;
  u8 k;
  for(i=0;i<ms;i++)
    for(j=0;j<0x1000;j++) k++;
}

void Get_ADC_Value(void)
{
  u32 AdcConValue1,AdcConValue2;
  u8 k;
  u16 Flash_tmp2[2];  
  //if(adcconvertime>=0)
  if(1)
  {
    //adcconvertime=0;
    Delayms(5);
    ADC_ConvertedValue[NumberOfAD++]=AD_sysGetAdcResult(ADC_Channel_2);
    Delayms(1);
    ADC_ConvertedValue[NumberOfAD++]=AD_sysGetAdcResult(ADC_Channel_3);
    
    if(NumberOfAD>=64)
    {
      NumberOfAD=0;
      AdcConValue1=0;
      AdcConValue2=0;
      for(k=0;k<64;)
      {
        AdcConValue1=AdcConValue1+ADC_ConvertedValue[k];
        AdcConValue2=AdcConValue2+ADC_ConvertedValue[k+1];
        k=k+2;
      }
      if(AdcConValue1/32>TEMP_VERIFY)
        Temperature=AdcConValue1/32-TEMP_VERIFY;
      else
        Temperature=0;     
      //Temperature=500;////////for test
      if(Weight_Verf_Sign==1)
      {
        Weight_Verf_Sign=0;
        if((AdcConValue2/32)>(Weight_Table[9]-1))
          WEIGHT_VERIFY=AdcConValue2/32-Weight_Table[10]-1;
        else
          WEIGHT_VERIFY=0;
        Flash_tmp2[0]=WEIGHT_VERIFY;
        Flash_tmp2[1]=WEIGHT_VERIFY;        
        write_flash(WEIGHT_VERF_ADDR,Flash_tmp2,4);
        Temperature=0;
        Speak(1);
        StartTime=100;
      }        
      if(AdcConValue2/32>WEIGHT_VERIFY)
        Weight=AdcConValue2/32-WEIGHT_VERIFY;
      else
        Weight=0;
      
      adcok=1;
    }
  }  
}


/*******************************************************************************
* Function Name  : RTC_Configuration
* Description    : Configures the RTC.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_Configuration(void)
{
  /* Enable PWR and BKP clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);  
  /* Allow access to BKP Domain */
  PWR_BackupAccessCmd(ENABLE);
  /* Reset Backup Domain */
  BKP_DeInit();
  /* Enable LSE */
  RCC_LSEConfig(RCC_LSE_ON);
  /* Wait till LSE is ready */
  while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
  {
  }
  /* Select LSE as RTC Clock Source */
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
  /* Enable RTC Clock */
  RCC_RTCCLKCmd(ENABLE);
  /* Wait for RTC registers synchronization */
  RTC_WaitForSynchro();
  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();  
  /* Enable the RTC Second */
  RTC_ITConfig(RTC_IT_SEC, ENABLE);
  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();  
  /* Set RTC prescaler: set RTC period to 1sec */
  RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */  
  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
}
/*******************************************************************************
* Function Name  : NVIC_Configuration
* Description    : Configures Vector Table base location.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
  NVIC_InitTypeDef NVIC_InitStructure;

#ifdef  VECT_TAB_RAM
  /* Set the Vector Table base location at 0x20000000 */
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  /* VECT_TAB_FLASH  */
  /* Set the Vector Table base location at 0x08000000 */
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
#endif

    /* Configure the Priority Group to 2 bits */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
  /* enabling interrupt */
  NVIC_InitStructure.NVIC_IRQChannel=USART1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);  
    /* enabling interrupt */
  NVIC_InitStructure.NVIC_IRQChannel=USART3_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);  
  //NVIC_InitStructure.NVIC_IRQChannel=RTC_IRQn;
 // NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 // NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 // NVIC_Init(&NVIC_InitStructure);   
  NVIC_InitStructure.NVIC_IRQChannel=TIM3_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  /* enabling interrupt   */
  NVIC_InitStructure.NVIC_IRQChannel=TIM2_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel=EXTI0_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel=EXTI1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel=EXTI2_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel=EXTI3_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel=EXTI4_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  NVIC_InitStructure.NVIC_IRQChannel=EXTI9_5_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  /*NVIC_InitStructure.NVIC_IRQChannel=EXTI15_10_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);*/
  /* Configure the SysTick handler priority */
//  NVIC_SystemHandlerPriorityConfig(SystemHandler_SysTick, 2, 0);
  /*NVIC_InitStructure.NVIC_IRQChannel=SysTick_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);*/
}

void IWDG_Configuration(void)
{ 
    /* IWDG counter clock: 40KHz(LSI) / 4 = 10 KHz */
   IWDG_SetPrescaler(IWDG_Prescaler_4);
   
   IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
   /* Set counter reload value to 1000 */
   //¸Ã²ÎÊýÔÊÐíÈ¡Öµ·¶Î§Îª0 ¨C 0x0FFF 
   IWDG_SetReload(4000);  //400ms        
   /* Reload IWDG counter */
   IWDG_ReloadCounter();
   /* Enable IWDG (the LSI oscillator will be enabled by hardware) */
   IWDG_Enable();

}

void TIMER3_Init()
{
 TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 
  //TIM_DeInit(TIM3);
  //TIM_InternalClockConfig(TIM3);
  //TIM_TimeBaseStructure.TIM_Period=(TIM_CLK/2000)-1;
 // TIM_TimeBaseStructure.TIM_Prescaler=1999;
  //TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; //ÏòÉÏ¼ÆÊýÄ£Ê½ 
 
  TIM_TimeBaseStructure.TIM_Period =(TIM_CLK/2000)-1;
  TIM_TimeBaseStructure.TIM_Prescaler = 1999;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  
  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
  TIM_SetAutoreload(TIM3, ((TIM_CLK/2000)-1)); 
   
 //TIM_OCInitTypeDef TIMOCInitStructure;
 //TIMOCInitStructure.TIM_OCMode = TIM_OCMode_Timing; //PWMÊä³ö±È½ÏÄ£Ê½
 //TIMOCInitStructure.TIM_Pulse =(u32)((TIM_CLK/(3000))-1);//Õ¼¿Õ±È=(CCRx/ARR)*100%
 //TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;//TIMÊä³ö±È½Ï¼«ÐÔ¸ß
 //TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;//Ê¹ÄÜÊä³ö×´Ì¬
 // TIM_OC1Init(TIM3, &TIMOCInitStructure);//TIM3µÄCH1Êä³ö
 
 TIM_ITConfig(TIM3,TIM_IT_Update, ENABLE); // ´ò¿ª²¶»ñ±È½ÏÖÐ¶Ï TIM_IT_Update 

 TIM_Cmd(TIM3, ENABLE); //¿ªÆôÊ±ÖÓ
}


void Init_Exit(void)
{
  EXTI_InitTypeDef EXTI_InitStructure;	//Íâ²¿ÖÐ¶ÏÏß
	
  /* Connect Button EXTI Line to Button GPIO Pin */
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource0);  	//Ñ¡ÔñPB0ËùÔÚµÄGPIO¹Ü½ÅÓÃ×÷Íâ²¿ÖÐ¶ÏÏßÂ·EXIT0		
  /* Configure Button EXTI line */
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;	//Íâ²¿ÏßÂ·EXIT0
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;			//ÉèÍâÍâ²¿ÖÐ¶ÏÄ£Ê½:EXTIÏßÂ·ÎªÖÐ¶ÏÇëÇó  EXTI_Mode_Event ;//ÉèÖÃ EXTIÏßÂ·ÎªÊÂ¼þÇëÇó 
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  //Íâ²¿ÖÐ¶Ï´¥·¢ÑØÑ¡Ôñ:ÉèÖÃÊäÈëÏßÂ·ÏÂ½µÑØÎªÖÐ¶ÏÇëÇó
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;		//Ê¹ÄÜÍâ²¿ÖÐ¶ÏÐÂ×´Ì¬
  EXTI_Init(&EXTI_InitStructure);		//¸ù¾ÝEXTI_InitStructÖÐÖ¸¶¨µÄ²ÎÊý³õÊ¼»¯ÍâÉèEXTI¼Ä´æÆ÷
                            
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource1); 
  EXTI_InitStructure.EXTI_Line = EXTI_Line1;	//Íâ²¿ÏßÂ·EXIT1
  EXTI_Init(&EXTI_InitStructure);	
              
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource2); 
  EXTI_InitStructure.EXTI_Line = EXTI_Line2;	//Íâ²¿ÏßÂ·EXIT2
  EXTI_Init(&EXTI_InitStructure);	
              
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource3); 
  EXTI_InitStructure.EXTI_Line = EXTI_Line3;	//Íâ²¿ÏßÂ·EXIT3
  EXTI_Init(&EXTI_InitStructure);	
              
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource4); 
  EXTI_InitStructure.EXTI_Line = EXTI_Line4;	//Íâ²¿ÏßÂ·EXIT4
  EXTI_Init(&EXTI_InitStructure);	
              
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource5); 
  EXTI_InitStructure.EXTI_Line = EXTI_Line5;	//Íâ²¿ÏßÂ·EXIT5
  EXTI_Init(&EXTI_InitStructure);	
              	
              
}

void Leddisp(u8 tempvalue,u8 state)
{
  switch(tempvalue)
  {
  case HEAT_TEMP60:   LIGHT1(state);break;
  case HEAT_TEMP70:   LIGHT3(state);break;
  case HEAT_TEMP80:   LIGHT4(state);break;
  case HEAT_TEMP90:   LIGHT5(state);break;
  case HEAT_TEMP100:  LIGHT6(state);break;
  default:  break;
  }
}

/*u8 TempAdjust(u8 temp)
{
  switch(temp)
  {
  case HEAT_TEMP60:   return(54);
  case HEAT_TEMP70:   return(65);
  case HEAT_TEMP80:   return(76);
  case HEAT_TEMP90:   return(86);
  case HEAT_TEMP100:  return(98);
  default:  return(temp-5);
  }
}


u8 TempAdjust(u8 temp)
{
  if(temp>=98)
    return (temp);
  else if(temp<50)
    return (temp-10+4*WaterWeight/10);
  else
  {
    return (temp - (160-temp)/10 + 2*WaterWeight/10);//-11
  } 
}*/

u8 ObjVref(u8 tempobj)
{
  if(WaterWeight>=5 && WaterWeight<=15)
  {
    if(tempobj<=60)
      return (tempobj-(120-tempobj)/10+TableObj[WaterWeight]);
    else if(tempobj<=70)
      return (tempobj-(130-tempobj)/10+TableObj[WaterWeight]);
    else if(tempobj<=90)
      return (tempobj-(140-tempobj)/10+TableObj[WaterWeight]);
      //return (tempobj-1);
    else if(tempobj<98)
      return (tempobj-1);
    else
      return (98);
  }
  else if(WaterWeight>15)
  {
    if(tempobj<=90)
      return (tempobj-2);
    else if(tempobj<98)
      return (tempobj-1);
    else
      return (98);
  }
  else
  {
    return 0;
  }
}

u8 TempRef(u8 tempnow)
{
  u8 RealTemp=0;
  u8 n=0;
  u16 vref=0;
  if(Mystate==1 || Mystate==2)
  {
    n=2*WaterWeight;
    if(StateTime<(n/2))
    {
      RealTemp=tempnow;
    }
    else if(StateTime<n)
    {
      if(tempnow<30)
        vref=0;
      else if(tempnow<90)
        vref=(2*(n-StateTime)*Table_L[WaterWeight]/n);
      else
        vref=(2*(n-StateTime)*Table_H[WaterWeight]/n);
      
      switch(WaterWeight)
      {
        case 5:    RealTemp=TempTable5[tempnow]-vref; break;
        case 6:    RealTemp=TempTable6[tempnow]-vref; break;
        case 7:    RealTemp=TempTable7[tempnow]-vref; break;
        case 8:    RealTemp=TempTable8[tempnow]-vref; break;
        case 9:    RealTemp=TempTable9[tempnow]-vref; break;
        case 10:   RealTemp=TempTable10[tempnow]-vref; break;
        case 11:   RealTemp=TempTable10[tempnow]-vref; break;
        case 12:   RealTemp=TempTable12[tempnow]-vref; break;
        case 13:   RealTemp=TempTable12[tempnow]-vref; break;
        case 14:   RealTemp=TempTable14[tempnow]-vref; break;
        case 15:   RealTemp=TempTable14[tempnow]-vref; break;
        case 16:   RealTemp=TempTable16[tempnow]-vref; break;
        case 17:   RealTemp=TempTable16[tempnow]-vref; break;
        default:   RealTemp=tempnow;break;                   
      }
    }
    else if(StateTime>=n) // >=n
    {
      switch(WaterWeight)
      {
        case 5:    RealTemp=TempTable5[tempnow]; break;
        case 6:    RealTemp=TempTable6[tempnow]; break;
        case 7:    RealTemp=TempTable7[tempnow]; break;
        case 8:    RealTemp=TempTable8[tempnow]; break;
        case 9:    RealTemp=TempTable9[tempnow]; break;
        case 10:   RealTemp=TempTable10[tempnow]; break;
        case 11:   RealTemp=TempTable10[tempnow]; break;
        case 12:   RealTemp=TempTable12[tempnow]; break;
        case 13:   RealTemp=TempTable12[tempnow]; break;
        case 14:   RealTemp=TempTable14[tempnow]; break;
        case 15:   RealTemp=TempTable14[tempnow]; break;
        case 16:   RealTemp=TempTable16[tempnow]; break;
        case 17:   RealTemp=TempTable16[tempnow]; break;
        default:   RealTemp=tempnow;break;                   
      }
    }
  }
  else
  {
    RealTemp=tempnow;
  }  
  return (RealTemp);
}

/* ---------------------------------------------------- */
/* 1¡¢conver ADC to the water temp¡¢WaterWeight         */
/* ---------------------------------------------------- */
void ADConverData(void)
{
    u8 i;
    
    if(adcok==1)
    {
      adcok=0;
      //WaterTemp=0;
      for(i=0;i<126;i++)
      {
        if(Temperature<Temp_Table[i])
        {
          if(i>0)
            wtmp=i-1;
          else
            wtmp=0;
          break;
        }
      }
      if(Heat==1)
      {
        if(wtmp>wtmppre)
        {
          wtmppre=wtmp;
          WaterTemp=wtmp;
        }
      }
      else
      {
        WaterTemp=wtmp;
        wtmppre=wtmp;
      }          
      for(i=0;i<50;i++)
      {
        if(Weight<Weight_Table[i])
        {
          CWaterWeight=i;
          break;
        }
      }
      if(Temperature>TEAPOT_HUB)
        TeaPotHub=1;
      else
      {
        TeaPotHub=0;
        Rst_Value();
        WARM_LIGHT(0);
      }
      if(TeaPotHub!=Pre_TeaPotHub || FirstPowerOn==1)
      {
        Pre_TeaPotHub=TeaPotHub;
        if(TeaPotHub==0)
        {
          if(FirstPowerOn==1)
          {
            FirstPowerOn=0;
            DelayN10ms(350);
          }
          WaterWeight=0;
          if(Connect_Service==0)
            DataReturn(5);
          else
          {
            DelayN10ms(120);
            DataReturn(3);
            bFlagOK=0;
            DelayNum10ms=200;
            while(bFlagOK==0)
            {
              if(DelayNum10ms==0)
                break;
            }
            DelayNum10ms=0;
            bFlagOK=0;
          }
        }
        else
        {
          FirstPowerOn=0;
          TimeSendHubState=TIME_SEND_HUB_STATE;
        }        
      }
    }   
}

/* ---------------------------------------------------- */
/* 2¡¢Heating the water when enable heat & teapot is hub*/
/*    Through Keyboard operation                        */
/* ---------------------------------------------------- */
void Heat_Offline(void)
{
    if((CheckTime==1) && (TeaPotHub==1) && (Keycontrol==1))
    {
      CheckTime=0;      
      if(Heat==1)                     /* (2.1)¡¢Heat */
      {
        RELAY(1);
        RelayOn=1;
        Mystate=1;
        WaterTemp=TempRef(wtmppre);
        wtmp2=WaterTemp;
        if(WaterTemp>=(ObjVref(Warmtemp)))
        {
           Heat=0;
           RELAY(0);
           RelayOn=0;
           HeatCRC=1;
           HeatCRCStart=0;
           HeatCRCTime=HEAT_CRC_TIME;
           FirstCRC=1;
           Warmheat=0;
           if(Warm==1)
           {
             WarmTime=KEEP_WARM_TIME;
             WarmEnable=1;
           }
           else
           {
             //Warmtemp=0;
             WarmEnable=0;
           }
           if(Warmtemp==100)
           {
                Speak(1);
                Finish=1;
                FinishTime=0;
                
                if(Connect_Service==0)
                {
                  DataReturn(4);
                }
                Mystate=0;
                StateTime=0;/**/
                //RecordTable[RecordNum].endtime=;
                LastTime[0]=0x32;
                LastTime[1]=0x30;
                LastTime[2]=0x30 + TYear/10;
                LastTime[3]=0x30 + TYear%10;
                LastTime[4]=0x30 + TMon/10;
                LastTime[5]=0x30 + TMon%10;
                LastTime[6]=0x30 + TDay/10;
                LastTime[7]=0x30 + TDay%10;
                LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                RecordNum++;
                if(RecordNum>10)
                  RecordNum=9;               
              
                if(Connect_Service==0)
                  DataReturn(5);
                else
                {
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else  //µÚ¶þ´Î
                  {                    
                    //memset(CommRcvBuf,0,512);
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }
                }                 
                Keycontrol=0;
                Leddisp(Warmtemp,1); //light on 30S
                LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
                Warmtemp=0;
                HeatCRC=0;
                FirstCRC=0;
                //memset(PhoneID,0,37);
                memcpy(PhoneID,manual,37);
           }
        }        
      }
      
      else if(HeatCRC==1)  /* (2.2)¡¢after shut dowm heat 15S ,judged the water temp*/
      {        
        if(HeatCRCStart==1)
        {                    
          if(WaterTemp<(Warmtemp-3))     // water temp <=Warmtemp-1
          {
            RELAY(1);
            RelayOn=1;
          }          
          if(WaterTemp>=(Warmtemp-3))
          {
            RELAY(0);
            RelayOn=0;
            HeatCRCStart=0;
            HeatCRC=0;
            //WarmTime=KEEP_WARM_TIME;
            WaterTemp=Warmtemp;
            Leddisp(Warmtemp,1);
            if(Warm==0)
            {
              Speak(1);
              Finish=1;
              FinishTime=0;
              
              if(Connect_Service==0)
              {
                DataReturn(4);
              }
                Mystate=0;
                StateTime=0;/**/
                //RecordTable[RecordNum].endtime=;
                LastTime[0]=0x32;
                LastTime[1]=0x30;
                LastTime[2]=0x30 + TYear/10;
                LastTime[3]=0x30 + TYear%10;
                LastTime[4]=0x30 + TMon/10;
                LastTime[5]=0x30 + TMon%10;
                LastTime[6]=0x30 + TDay/10;
                LastTime[7]=0x30 + TDay%10;
                LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                RecordNum++;
                if(RecordNum>10)
                  RecordNum=9;               
              
                if(Connect_Service==0)
                  DataReturn(5);
                else
                {
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else  //µÚ¶þ´Î
                  {                    
                    //memset(CommRcvBuf,0,512);
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }
                }                 
                Keycontrol=0;
                Leddisp(Warmtemp,1); //light on 30S
                LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
                Warmtemp=0;
                //memset(PhoneID,0,37);
                memcpy(PhoneID,manual,37);               
            }
          } 
          FirstCRC=0;
         }
        if(WaterTemp>=Warmtemp)
          WaterTemp=Warmtemp;
        else if((Warmtemp-WaterTemp)>2)
          WaterTemp=Warmtemp-2;
        else
          WaterTemp=Warmtemp-1;       
      }
      else if((Warm==1) && (WarmEnable==1))    /* (2.3)¡¢keep warm */
      {
        Mystate=3;
        
        if(Warmheat==1)
        {
          RELAY(1);
          RelayOn=1;
          if(WaterTemp>=(Warmtemp-2))
          {
            RELAY(0);
            RelayOn=0;
            Warmheat=0;
          }
        }
        else
        {
          if(WaterTemp<(Warmtemp-3))
          {
            RELAY(1);
            RelayOn=1;
            Warmheat=1;
          }
        }
        
        if(WaterTemp<Warmtemp-1)
          WaterTemp=Warmtemp-1;
        else if(WaterTemp>Warmtemp+1)
          WaterTemp=Warmtemp+1;
        
        if(WarmOK==1)
        {          
                Speak(1);
                Finish=1;
                FinishTime=0;
              
                if(Connect_Service==0)
                  DataReturn(4);          
                Rst_Value();
                WARM_LIGHT(0);
          
                //RecordTable[RecordNum].endtime=;
                LastTime[0]=0x32;
                LastTime[1]=0x30;
                LastTime[2]=0x30 + TYear/10;
                LastTime[3]=0x30 + TYear%10;
                LastTime[4]=0x30 + TMon/10;
                LastTime[5]=0x30 + TMon%10;
                LastTime[6]=0x30 + TDay/10;
                LastTime[7]=0x30 + TDay%10;
                LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                RecordNum++;
                if(RecordNum>10)
                  RecordNum=9;
                
                if(Connect_Service==0)
                    DataReturn(5);
                else
                {
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else  //µÚ¶þ´Î
                  {
                    //memset(CommRcvBuf,0,512);
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }
                }  
                //memset(PhoneID,0,37);
                memcpy(PhoneID,manual,37);
        }        
      }

      SendTime++;
      if((SendTime>=20) && (Keycontrol>0))
      {
        SendTime=0;
        DataReturn(3);
      }
    }
}
 

/* ---------------------------------------------------- */
/* 3¡¢Heating the water when enable heat & teapot is hub*/
/*    Through Wifi Telecontrol                          */
/* ---------------------------------------------------- */
void Heat_Online(void)
{
    if((CheckTime==1) && (TeaPotHub==1) && (Telecontrol==1))
    {
      CheckTime=0;
            
      if(Heat==1)                     /* (3.1)¡¢Heat */
      {
        RELAY(1);
        RelayOn=1;
        Mystate=1; 
        
        if(Purify>0)                    /* ¾»»¯ */
        {
          WaterTemp=TempRef(wtmppre);
          if(WaterTemp>=BOIL_TEMP)
          {
            WaterTemp=100;
            Mystate=2;
            //StateTime=0;
            Pure_Time--;
            if(Pure_Time==0)
            {
              RELAY(0);
              RelayOn=0;
              Heat=0;
              Purify=0;
              Boil=0;
              Warmheat=0;
              HeatCRC=0;
              StateTime=0; /**/             
              if(Warm==1)
              {
                WarmTime=TeleWarmTime*60*100+HEAT_CRC_TIME;
                WarmEnable=1;
                EnCool=1;
                Leddisp(HEAT_TEMP100,1); //light on 30S
                //LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
              }
              else
              {
                Leddisp(HEAT_TEMP100,1); 
                EnCool=1;  
              }
            }
          }
        }        
        else if(Boil>0)              /* ÉÕ¿ª */
        {
          WaterTemp=TempRef(wtmppre);
          if(WaterTemp>=BOIL_TEMP)
          {
              WaterTemp=100;
              RELAY(0);
              RelayOn=0;
              Heat=0;
              Purify=0;
              Boil=0;
              Warmheat=0;
              HeatCRC=0;
              StateTime=0;/**/
              if(Warm==1)
              {
                WarmTime=TeleWarmTime*60*100+HEAT_CRC_TIME;
                WarmEnable=1;
                EnCool=1;
                Leddisp(HEAT_TEMP100,1); //light on 30S
                //LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
              }
              else
              {
                Leddisp(HEAT_TEMP100,1); 
                EnCool=1;                 
              }            
          }
        }
        
        else 
        {
          WaterTemp=TempRef(wtmppre);
          if(WaterTemp>=(ObjVref(Warmtemp))) /* ²»¾»»¯ */
          {
           Heat=0;
           RELAY(0);
           RelayOn=0;
           HeatCRC=1;
           HeatCRCStart=0;
           HeatCRCTime=HEAT_CRC_TIME;
           FirstCRC=1;
           Warmheat=0;

           if(Warm==1)
           {
             WarmTime=TeleWarmTime*60*100+HEAT_CRC_TIME;
             WarmEnable=1;
           }
           else
           {
             WarmEnable=0;
             StateTime=0;
           }
          }
        }        
      }
      
      else if(HeatCRC==1)  /* (3.2)¡¢after shut dowm heat 15S ,judged the water temp*/
      {
        if(HeatCRCStart==1)
        {           
          if(WaterTemp<(Warmtemp-3))     // water temp <=Warmtemp-1
          {
            RELAY(1);
            RelayOn=1;
          }          
          if(WaterTemp>=(Warmtemp-3))
          {
            RELAY(0);
            RelayOn=0;
            HeatCRCStart=0;
            HeatCRC=0;
            WarmTime=TeleWarmTime*60*100;
            WaterTemp=Warmtemp;
            StateTime=0;/**/
            Leddisp(HEAT_TEMP100,1); 
            if(Warm==0)
            {
              Speak(1);
              Finish=1;
              FinishTime=0;
              
              if(Connect_Service==0)
              {
                DataReturn(4);
              }
              Mystate=0;
              StateTime=0;
              
              //RecordTable[RecordNum].endtime=;
              LastTime[0]=0x32;
              LastTime[1]=0x30;
              LastTime[2]=0x30 + TYear/10;
              LastTime[3]=0x30 + TYear%10;
              LastTime[4]=0x30 + TMon/10;
              LastTime[5]=0x30 + TMon%10;
              LastTime[6]=0x30 + TDay/10;
              LastTime[7]=0x30 + TDay%10;
              LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
              LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
              LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
              LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
              LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
              LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
              LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
              RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
              RecordNum++;
              if(RecordNum>10)
                RecordNum=9;
                
              if(Connect_Service==0)
                DataReturn(5);
              else
              {
                
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else   // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }                  
              }
              
              Telecontrol=0;
              Leddisp(HEAT_TEMP100,1); //light on 30S
              LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
              Warmtemp=0;
              //memset(PhoneID,0,37); 
              memcpy(PhoneID,manual,37);
            }
          } 
          FirstCRC=0;
         }        
        if(WaterTemp>=Warmtemp)
          WaterTemp=Warmtemp;
        else if((Warmtemp-WaterTemp)>2)
          WaterTemp=Warmtemp-2;
        else
          WaterTemp=Warmtemp-1;        
      }
            
      else if(EnCool==1)  /*ÀäÈ´*/
      {
        Mystate=4;
        if(Warm==1)
          WarmTime=TeleWarmTime*60*100;      
        
        if(WaterTemp<=Warmtemp)
        {
          EnCool=0;   
          if(Warm==0)
          {
                Speak(1);
                Finish=1;
                FinishTime=0;
              
                if(Connect_Service==0)
                  DataReturn(4);
                Mystate=0;
                StateTime=0;
                
                //RecordTable[RecordNum].endtime=;
                  LastTime[0]=0x32;
                  LastTime[1]=0x30;
                  LastTime[2]=0x30 + TYear/10;
                  LastTime[3]=0x30 + TYear%10;
                  LastTime[4]=0x30 + TMon/10;
                  LastTime[5]=0x30 + TMon%10;
                  LastTime[6]=0x30 + TDay/10;
                  LastTime[7]=0x30 + TDay%10;
                  LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                  LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                  LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                  LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                  LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                  LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                  LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                  RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                  
                  RecordNum++;
                  if(RecordNum>10)
                    RecordNum=9;
                  
                if(Connect_Service==0)
                  DataReturn(5);
                else
                {
                  DataReturn(3);
                  bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else   // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }                  
                }

                Warmtemp=0;
                WarmEnable=0;
                Telecontrol=0;                
                Leddisp(HEAT_TEMP100,1);   /* ÐèÒªÈ·ÈÏ ÁÁÄÄ¸öµÆ£¿ */
                LightHeatOffTime=LIGHT_HEAT_OFF_TIME;
                //memset(PhoneID,0,37);
                memcpy(PhoneID,manual,37);                
          }
        }
      }
      
      else if((Warm==1) && (WarmEnable==1))    /* (3.3)¡¢keep warm */
      {
        Mystate=3;
        //DataReturn(3);
        //Leddisp(HEAT_TEMP100,1);   //light on 30Min
        if(Warmheat==1)
        {
          RELAY(1);
          RelayOn=1;
          if(WaterTemp>=(Warmtemp-2))
          {
            RELAY(0);
            RelayOn=0;
            Warmheat=0;
          }
        }
        else
        {
          if(WaterTemp<(Warmtemp-3))
          {
            RELAY(1);
            RelayOn=1;
            Warmheat=1;
          }
        }        
        if(WaterTemp<Warmtemp-1)
          WaterTemp=Warmtemp-1;
        else if(WaterTemp>Warmtemp+1)
          WaterTemp=Warmtemp+1;        
        if(WarmOK==1)
        {
          
          Speak(1);
          Finish=1;
          FinishTime=0;              
          if(Connect_Service==0)
            DataReturn(4);          
          Rst_Value();
          WARM_LIGHT(0);          
           //RecordTable[RecordNum].endtime=;
                LastTime[0]=0x32;
                LastTime[1]=0x30;
                LastTime[2]=0x30 + TYear/10;
                LastTime[3]=0x30 + TYear%10;
                LastTime[4]=0x30 + TMon/10;
                LastTime[5]=0x30 + TMon%10;
                LastTime[6]=0x30 + TDay/10;
                LastTime[7]=0x30 + TDay%10;
                LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                RecordNum++;
                if(RecordNum>10)
                  RecordNum=9;
                
          if(Connect_Service==0)
              DataReturn(5);
          else
          {
                DataReturn(3);
                bFlagOK=0;
                DelayNum10ms=200;
                while(bFlagOK==0)
                {
                  if(DelayNum10ms==0)
                    break;
                }
                DelayNum10ms=0;
                if(bFlagOK==1)
                {
                  bFlagOK=0;
                  OffLineTime=OFF_LINE_TIME;
                } 
                else   // µÚ¶þ´Î
                {
                    bFlagOK=0;
                    DataReturn(3);
                    // bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                }
          }
          //memset(PhoneID,0,37);
          memcpy(PhoneID,manual,37);
        }        
      }      
      SendTime++;
      if((SendTime>=20) && (Telecontrol>0))
      {
        SendTime=0;
        DataReturn(3);
        if(Connect_Service==1)
          DelayN10ms(10);
      }
    }
}


/*----------------------------------------------------------------------------*/
/*Á¬ÉÏ·þÎñÆ÷Ê±²Ù×÷------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void Tel_scan(void)
{
      u8 i;
      u8 Tel_orderid[17];
      u8 Tel_appid[37];
      u8 Tel_temp;
      u8 Tel_boil;
      u8 Tel_purify;
      u8 Tel_keepwarm;
      u8 Tel_orderhour;
      u8 Tel_ordermin;
      u8 Tel_ordersec;
      u8 Tel_week;
      u8 Tel_action;
      u8 tmp[40];
      u8 len;
      u8 heatjusttime=0;
            
      if(RecordNum>0)             /* 1¡¢send  heat record ·¢ËÍ¼ÓÈÈ¼ÇÂ¼*/
      {
        DelayN10ms(100);
        memset(CommRcvBuf,0,512);
        DataReturn(2);        
        bFlagOK=0;
        DelayNum10ms=200;
        while(bFlagOK==0)
        {
          if(DelayNum10ms==0)
            break;
        }
        DelayNum10ms=0;
        if(bFlagOK==1 && CommRcvBuf[11]=='1')
        {
          OffLineTime=OFF_LINE_TIME;
          memmove(&RecordTable[0].operation,&RecordTable[1].operation,sizeof(HeatRecord)*(9));
          memset(&RecordTable[9].operation,0,sizeof(HeatRecord));
          RecordNum--;
          OffLineTime=OFF_LINE_TIME;
          bFlagOK=0;
        }       
      }
      
      if(OffLineTime==0)           /* 2¡¢Óë·þÎñÆ÷¶Ï¿ªÁ¬½Ó¡£³¬Ê±*/
      {
         //set_mode(0);
          Connect_Service=0;          
          TryConnectWan=0;
          TryConnectWanTime=CONNECT_WAN_TIME;
      }
      
      if(Read_Requst==1)           /* 3¡¢Ïò·þÎñÆ÷»ñÈ¡ÇëÇó*/
      {
        Read_Requst=0;
        memset(CommRcvBuf,0,512);
        bFlagOK=0;
        DataReturn(4);        
        DelayNum10ms=200;
        while(bFlagOK==0)
        {
          if(DelayNum10ms==0)
            break;
        }
        DelayNum10ms=0;
        if(bFlagOK==1 && CommRcvBuf[11]=='1')     
        {         
          OffLineTime=OFF_LINE_TIME;
          bFlagOK=0;
          
          //apponlineflag
          get_telparmer(tmp,"apponlineflag",CommRcvBuf,'"');  //apponlineflag
          if(tmp[0]=='1')
            App_OnLine=1;
          else
            App_OnLine=0;
          
          if(CommRcvBuf[23]>='1' && CommRcvBuf[23]<='9')     /* 3.1¡¢ÓÐÈÎÎñ*/
          {
            App_OnLine=1;            
            get_telparmer(tmp,"orderid",CommRcvBuf,'"');  //Tel_orderid
            memset(Tel_orderid,0,sizeof(Tel_orderid));
            strcat(Tel_orderid,tmp);
            memset(Orderid,0,sizeof(Orderid));
            strcat(Orderid,Tel_orderid);
            
            get_telparmer(tmp,"appid",CommRcvBuf,'"');  //Tel_appid
            memset(Tel_appid,0,sizeof(Tel_appid));
            strcat(Tel_appid,tmp);
            
            get_telparmer(tmp,"temp",CommRcvBuf,'"');  //Tel_temp
            len=strlen(tmp);
            if(len==4)
              Tel_temp=(tmp[0]-0x30)*100 + (tmp[1]-0x30)*10 + (tmp[2]-0x30);
            else if(len==3)
              Tel_temp=(tmp[0]-0x30)*10 + (tmp[1]-0x30) ;
            else if(len==2)
              Tel_temp=(tmp[0]-0x30);
            
            get_telparmer(tmp,"boil",CommRcvBuf,'"');   //Tel_boil
            Tel_boil=tmp[0]-0x30;
            
            get_telparmer(tmp,"purify",CommRcvBuf,'"');  //Tel_purify
            len=strlen(tmp);
            if(len==2)
              Tel_purify= (tmp[0]-0x30)*10 + (tmp[1]-0x30);
            else if(len==1)
              Tel_purify= (tmp[0]-0x30);
            
            get_telparmer(tmp,"keepwarm",CommRcvBuf,'"');  //Tel_keepwarm
            len=strlen(tmp);
            if(len==2)
              Tel_keepwarm= (tmp[0]-0x30)*10 + (tmp[1]-0x30);
            else if(len==1)
              Tel_keepwarm= (tmp[0]-0x30);
            
            get_telparmer(tmp,"heattime",CommRcvBuf,'"');  //Tel_heattime
            len=strlen(tmp);
              if((len==1) && (tmp[0]==0x30))
              {
                heatjusttime=1;
              }
              else if(len==6)
              {
                Tel_orderhour=(tmp[0]-0x30)*10 + (tmp[1]-0x30);
                Tel_ordermin =(tmp[2]-0x30)*10 + (tmp[3]-0x30);
                Tel_ordersec =(tmp[4]-0x30)*10 + (tmp[5]-0x30);                
              }
              
             get_telparmer(tmp,"week",CommRcvBuf,'"');  //Tel_week
             Tel_week=0;
             Tel_week=Tel_week|((tmp[0]-0x30));
             Tel_week=Tel_week|((tmp[1]-0x30)<<1);
             Tel_week=Tel_week|((tmp[2]-0x30)<<2);
             Tel_week=Tel_week|((tmp[3]-0x30)<<3);
             Tel_week=Tel_week|((tmp[4]-0x30)<<4);
             Tel_week=Tel_week|((tmp[5]-0x30)<<5);
             Tel_week=Tel_week|((tmp[6]-0x30)<<6);
             
             get_telparmer(tmp,"action",CommRcvBuf,'"');  //Tel_action
             if((strncmp (tmp, "heat", 4))==0)
               Tel_action=1;
             else
               Tel_action=0;
             
             if(heatjusttime==1)    /* 3.1.1¡¢¼´Ê±Ïà¹Ø*/
             {
               heatjusttime=0;
               if(Tel_action==1)    /*3.1.1.1¼´Ê±¼ÓÈÈ*/
               {       
                 if((WaterWeight>=5) && (WaterWeight<=20) && (TeaPotHub==1) && (Keycontrol==0) && (Telecontrol==0))
                 {
                  Rst_Value();
                  WARM_LIGHT(0);
                  Telecontrol=1;
                  RelayOnTime=0;
                  Heat=1;
                  Boil=Tel_boil;
                  Purify=Tel_purify; 
                  Pure_Time=Tel_purify*5*60;
                  TeleWarmTime=Tel_keepwarm; 
                  Warmtemp=Tel_temp;
                  
                  memset(PhoneID,0,sizeof(PhoneID));
                  strcat(PhoneID,Tel_appid);        
                  if(Tel_keepwarm>0)
                  {
                    Warm=1;
                    LIGHT2(1);
                  }
                  RecordTable[RecordNum].operation=1;
                  RecordTable[RecordNum].starttime[0]=THour/10 + 0x30;
                  RecordTable[RecordNum].starttime[1]=THour%10 + 0x30;
                  RecordTable[RecordNum].starttime[2]=TMin/10 + 0x30;
                  RecordTable[RecordNum].starttime[3]=TMin%10 + 0x30;
                  RecordTable[RecordNum].starttime[4]=TSec/10 + 0x30;
                  RecordTable[RecordNum].starttime[5]=TSec%10 + 0x30;
                  RecordTable[RecordNum].starttime[6]=0;
                  RecordTable[RecordNum].level=WaterWeight;
                  RecordTable[RecordNum].temp=Tel_temp;
                  RecordTable[RecordNum].boil=Tel_boil;
                  RecordTable[RecordNum].purify=Tel_purify;
                  RecordTable[RecordNum].keepwarm=Tel_keepwarm;  
                  
                  memset(RecordTable[RecordNum].PhoneID,0,37);
                  strcat(RecordTable[RecordNum].PhoneID,Tel_appid);
                  
                  StateTime=0;
                  Mystate=1;
                  //StateTime=0;
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                  }                 
                  
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(5);
                  
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                  }
                  else   // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    //memset(CommRcvBuf,0,512);
                    DataReturn(5);                  
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }
                  }
                  
                }
                else  //  ²»Âú×ã¼°Ê±¼ÓÈÈÌõ¼þ£¬·µ»Ø
                {
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(5);
                  
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                  }
                  else   // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    //memset(CommRcvBuf,0,512);
                    DataReturn(5);                  
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }
                  }
                  
                }
               }
               
               else     /* 3.1.1.2¡¢È¡ÏûÕýÔÚ¼ÓÈÈµÄ²Ù×÷*/
               {
                 if((Telecontrol==1) || (Keycontrol==1))
                 {
                  Speak(1);
                  Finish=1;
                  FinishTime=0;                                   
              
                  LastTime[0]=0x32;
                  LastTime[1]=0x30;
                  LastTime[2]=0x30 + TYear/10;
                  LastTime[3]=0x30 + TYear%10;
                  LastTime[4]=0x30 + TMon/10;
                  LastTime[5]=0x30 + TMon%10;
                  LastTime[6]=0x30 + TDay/10;
                  LastTime[7]=0x30 + TDay%10;
                  LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
                  LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
                  LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
                  LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
                  LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
                  LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
                  LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
                  RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
                  
                  RecordNum++;
                  if(RecordNum>10)
                    RecordNum=9;
                  
                  Rst_Value();
                  WARM_LIGHT(0); 
                  
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  //bFlagOK=0;
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    bFlagOK=0;
                    OffLineTime=OFF_LINE_TIME;
                  }
                  else  //µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    DataReturn(3);
                    //bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      bFlagOK=0;
                      OffLineTime=OFF_LINE_TIME;
                    }
                  }
                  //memset(PhoneID,0,37);
                  memcpy(PhoneID,manual,37);
                  
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(6);                  
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                  }
                  else  // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    DataReturn(6);                  
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }
                  }
                }
                
                else  // Ã»ÓÐÔÚ¼ÓÈÈ
                {
                  DelayN10ms(50);
                  bFlagOK=0;
                  //memset(CommRcvBuf,0,512);
                  DataReturn(6);                  
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                  }
                  else  // µÚ¶þ´Î
                  {
                    bFlagOK=0;
                    DataReturn(6);                  
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }
                  }
                }
                  
               }
             }
             else                    /*3.1.2¡¢Ô¤Ô¼Ïà¹Ø*/
             {
               if(Tel_action==1)    /* 3.1.2.1Ôö¼ÓÔ¤Ô¼*/
               {
                if(Ordernum>16)
                  Ordernum=0;
                 //´æÈëbuffer
                for(i=0;i<16;i++)
                {
                  if(strncmp(OrderTable[i].OrderID,Tel_orderid,16)==0)
                    break;
                }
                if(i>=16)
                {
                  OrderTable[Ordernum].Warmtemp=Tel_temp;
                  OrderTable[Ordernum].Boil=Tel_boil;
                  OrderTable[Ordernum].Purify=Tel_purify;
                  OrderTable[Ordernum].WarmTime=Tel_keepwarm;
                  OrderTable[Ordernum].OrderHour=Tel_orderhour;
                  OrderTable[Ordernum].OrderMin=Tel_ordermin;
                  OrderTable[Ordernum].OrderSec=Tel_ordersec;
                  OrderTable[Ordernum].OrderWeek=Tel_week;
                  strcat(OrderTable[Ordernum].OrderID,Tel_orderid);
                  strcat(OrderTable[Ordernum].PhoneID,Tel_appid);             
                  Ordernum++;
                  if(Ordernum>16)
                  {
                    Ordernum=15;
                    memmove(&OrderTable[0].Warmtemp,&OrderTable[1].Warmtemp,sizeof(HeatInfo)*(15));
                    memset(&OrderTable[15].Warmtemp,0,sizeof(HeatInfo));
                  }
                  write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
                }
                
                ////////
                DelayN10ms(50);
                bFlagOK=0;
                //memset(CommRcvBuf,0,512);
                DataReturn(5);
                DelayNum10ms=200;
                while(bFlagOK==0)
                {
                  if(DelayNum10ms==0)
                    break;
                }
                DelayNum10ms=0;
                if(bFlagOK==1)
                {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                }
                else  // µÚ¶þ´Î
                {
                  bFlagOK=0;
                  DataReturn(5);
                  DelayNum10ms=200;
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;
                  if(bFlagOK==1)
                  {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                  }
                }                
               }
               else                 /* 3.1.2.2¡¢È¡ÏûÔ¤Ô¼*/
               {
                 //É¾³ýbuffer
                for(i=0;i<16;i++)
                {
                  if(strcmp(OrderTable[i].OrderID,Tel_orderid)==0)
                  {
                    memset(&OrderTable[i].Warmtemp,0,sizeof(HeatInfo));
                    memmove(&OrderTable[i].Warmtemp,&OrderTable[i+1].Warmtemp,sizeof(HeatInfo)*(15-i));
                    memset(&OrderTable[15].Warmtemp,0,sizeof(HeatInfo));
                    if(Ordernum>0)
                      Ordernum--;
                    write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
                    break;
                  }
                }      
                ////////
                DelayN10ms(50);
                bFlagOK=0;
                //memset(CommRcvBuf,0,512);
                DataReturn(6);
                
                DelayNum10ms=200;
                while(bFlagOK==0)
                {
                  if(DelayNum10ms==0)
                    break;
                }
                DelayNum10ms=0;
                if(bFlagOK==1)
                {
                    OffLineTime=OFF_LINE_TIME;
                    bFlagOK=0;
                }
                else
                {
                   bFlagOK=0;
                   //memset(CommRcvBuf,0,512);
                   DataReturn(6);
                
                   DelayNum10ms=200;
                   while(bFlagOK==0)
                   {
                     if(DelayNum10ms==0)
                       break;
                   } 
                   DelayNum10ms=0;
                   if(bFlagOK==1)
                   {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                   }     
                 }
               }
             }
                          
            //qushu  
            
          }          
        } 
      }
}

void CheckOrder(void)
{
  u8 i;
  
  if(Telecontrol==0 && Keycontrol==0)
  {
    for(i=0;i<Ordernum;i++)
    {
      if((OrderTable[i].OrderWeek&(0x01<<TWeek)) || OrderTable[i].OrderWeek==0x00)
      {
        if((OrderTable[i].OrderHour==THour) && (OrderTable[i].OrderMin==TMin) && (OrderTable[i].OrderSec==TSec))
        {
          if((WaterWeight>=5) && (WaterWeight<=20) && (TeaPotHub==1))
          {
                  
                  Rst_Value();
                  WARM_LIGHT(0);
                  Telecontrol=1;
                  RelayOnTime=0;
                  Heat=1;
                  Boil=OrderTable[i].Boil;
                  Purify=OrderTable[i].Purify; 
                  Pure_Time=Purify*5*60;
                  TeleWarmTime=OrderTable[i].WarmTime; 
                  Warmtemp=OrderTable[i].Warmtemp;
                  
                  memset(PhoneID,0,sizeof(PhoneID));
                  strcat(PhoneID,OrderTable[i].PhoneID);
                  
                  memset(Orderid,0,sizeof(Orderid));
                  strcat(Orderid,OrderTable[i].OrderID);
                  
                  OrderOperState=1;
                  
                  if(TeleWarmTime>0)
                  {
                    Warm=1;
                    LIGHT2(1);
                  }
                  
                  RecordTable[RecordNum].operation=2;
                  RecordTable[RecordNum].starttime[0]=THour/10 + 0x30;
                  RecordTable[RecordNum].starttime[1]=THour%10 + 0x30;
                  RecordTable[RecordNum].starttime[2]=TMin/10 + 0x30;
                  RecordTable[RecordNum].starttime[3]=TMin%10 + 0x30;
                  RecordTable[RecordNum].starttime[4]=TSec/10 + 0x30;
                  RecordTable[RecordNum].starttime[5]=TSec%10 + 0x30;
                  RecordTable[RecordNum].starttime[6]=0;
                  RecordTable[RecordNum].level=WaterWeight;
                  RecordTable[RecordNum].temp=Warmtemp;
                  RecordTable[RecordNum].boil=Boil;
                  RecordTable[RecordNum].purify=Purify;
                  RecordTable[RecordNum].keepwarm=OrderTable[i].WarmTime;
                  
                  StateTime=0;
                  Mystate=1;                  
                  
                  DelayN10ms(20);
                  //memset(CommRcvBuf,0,512);
                  DataReturn(3);
                  if(Connect_Service==1)
                  {
                    bFlagOK=0;
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }                    

                    DelayN10ms(50);
                    bFlagOK=0;
                    DataReturn(7);
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }                    
                  }                  
          }
          else    // ²»·ûºÏ¼ÓÈÈÌõ¼þ£¬Ô¤Ô¼Î´¿ªÊ¼
          {
            OrderOperState=3;            
            memset(Orderid,0,sizeof(Orderid));
            strcat(Orderid,OrderTable[i].OrderID);            
            memset(PhoneID,0,sizeof(PhoneID));
            strcat(PhoneID,OrderTable[i].PhoneID);            
            if(Connect_Service==1)
            {
                    DelayN10ms(50);
                    bFlagOK=0;
                    DataReturn(7);
                    DelayNum10ms=200;
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0;
                    if(bFlagOK==1)
                    {
                      OffLineTime=OFF_LINE_TIME;
                      bFlagOK=0;
                    }              
            }
            memcpy(PhoneID,manual,37);
            OrderOperState=0;            
          }
          
          
          if(OrderTable[i].OrderWeek==0x00)
          {
            memset(&OrderTable[i].Warmtemp,0,sizeof(HeatInfo));
            memmove(&OrderTable[i].Warmtemp,&OrderTable[i+1].Warmtemp,sizeof(HeatInfo)*(15-i));
            memset(&OrderTable[15].Warmtemp,0,sizeof(HeatInfo));
            if(Ordernum>0)
              Ordernum--;
            write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
          }
                  
        }
      }
    }
  }
}

static int get_parmer(unsigned char *str,unsigned char *name,unsigned char *context,unsigned char chr)
{
	int cnt=0;
	unsigned char *parm;
	while(*context){
		if((*(context-1)!=chr)&&(*(context-1)!='?')){
			context++;
			continue;
		}
		if((memcmp(context,name,strlen((const char *)name))==0)&&
			(*(context+strlen((const char *)name))=='=')){//Ãû×ÖÆ¥Åä¶øÇÒÒÔ¡®=¡¯¿ªÊ¼²ÎÊý
			parm=context+strlen((const char *)name)+1;//"name=
			context+=(strlen((const char *)name)+1);
			while((*context!=chr)&&(*context!='\0')&&(*context!='\r')){// &,»Ø³µ£¬±êÊ¾²ÎÊý½áÊø
				cnt++;
				context++;
			}
			memcpy(str,parm,cnt);//copy parm to str
			*(str+cnt)='\0';
			return 0;
		}
		else
			context++;	
	}
	return -1;//cann't find the parm
}



static int get_telparmer(unsigned char *str,unsigned char *name,unsigned char *context,unsigned char chr)
{
	int cnt=0;
	unsigned char *parm;
	while(*context){
		if((*(context-1)!=chr)&&(*(context-1)!='?')){
			context++;
			continue;
		}
		if((memcmp(context,name,strlen((const char *)name))==0)&&
			(*(context+strlen((const char *)name))=='"')){//Ãû×ÖÆ¥Åä¶øÇÒÒÔ¡®"¡¯¿ªÊ¼²ÎÊý
                          parm=context+strlen((const char *)name)+3;//"name":"
			context+=(strlen((const char *)name)+3);
			while(*context!=chr){// ±êÊ¾²ÎÊý½áÊø
				cnt++;
				context++;
			}
			memcpy(str,parm,cnt);//copy parm to str
			*(str+cnt)='\0';
			return 0;
		}
		else
			context++;	
	}
	return -1;//cann't find the parm
}
/* ---------------------------------------------------- */
/*  Uart3 receve data process                           */
/* ---------------------------------------------------- */
void CommProc3(void)
{
  u8  tmp[64];
  u8  len,i;
  u8  heatjusttime=0;
  u8  Rcv_Warmtemp;
  u8  Rcv_Boil;
  u8  Rcv_Purify;
  u8  Rcv_WarmTime;
  u8  Rcv_OrderHour;
  u8  Rcv_OrderMin;
  u8  Rcv_OrderSec;
  u8  Rcv_OrderWeek;
  u8  Rcv_OrderEnable;
  u8  Rcv_OrderID[17];
  u8  Rcv_PhoneID[64];
  u32 count;
  
  if((bFlagOK==1) && (Connect_Service==0))   //LAN
  {
    switch(CommRcvBuf[7]-0x30)
    {
    case 1:   get_parmer(tmp,"TEMP",CommRcvBuf,'&');     //temp
              len=strlen(tmp);
              if(len==4)
                Rcv_Warmtemp=(tmp[0]-0x30)*100 + (tmp[1]-0x30)*10 + (tmp[2]-0x30);
              else if(len==3)
                Rcv_Warmtemp=(tmp[0]-0x30)*10 + (tmp[1]-0x30) ;
              else if(len==2)
                Rcv_Warmtemp=(tmp[0]-0x30);
              
              get_parmer(tmp,"BOIL",CommRcvBuf,'&');    //biol
              Rcv_Boil=tmp[0]-0x30;
              
              get_parmer(tmp,"PURIFY",CommRcvBuf,'&');  //Purify
              len=strlen(tmp);
              if(len==2)
                Rcv_Purify= (tmp[0]-0x30)*10 + (tmp[1]-0x30);
              else if(len==1)
                Rcv_Purify= (tmp[0]-0x30);
              
              get_parmer(tmp,"KEEPWARM",CommRcvBuf,'&');  //KeepWarm
              len=strlen(tmp);
              if(len==2)
                Rcv_WarmTime= (tmp[0]-0x30)*10 + (tmp[1]-0x30);
              else if(len==1)
                Rcv_WarmTime= (tmp[0]-0x30);
              
              get_parmer(tmp,"HEATTIME",CommRcvBuf,'&');  //HEATTIME
              len=strlen(tmp);
              if((len==1) && (tmp[0]==0x30))
              { 
                heatjusttime=1;
              }
              else if(len==6)
              {
                Rcv_OrderHour=(tmp[0]-0x30)*10 + (tmp[1]-0x30);
                Rcv_OrderMin =(tmp[2]-0x30)*10 + (tmp[3]-0x30);
                Rcv_OrderSec =(tmp[4]-0x30)*10 + (tmp[5]-0x30);                
              }
              
              get_parmer(tmp,"WEEK",CommRcvBuf,'&');  //WEEK
              Rcv_OrderWeek=0;
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[0]-0x30));
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[1]-0x30)<<1);
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[2]-0x30)<<2);
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[3]-0x30)<<3);
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[4]-0x30)<<4);
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[5]-0x30)<<5);
              Rcv_OrderWeek=Rcv_OrderWeek|((tmp[6]-0x30)<<6);
              
              get_parmer(tmp,"ENABLE",CommRcvBuf,'&');  //ENABLE
              Rcv_OrderEnable=tmp[0]-0x30;
              
              get_parmer(tmp,"ORDERID",CommRcvBuf,'&');  //ORDERID
              memset(Rcv_OrderID,0,sizeof(Rcv_OrderID));
              strcat(Rcv_OrderID,tmp);
              
              get_parmer(tmp,"ID",CommRcvBuf,'&');  //phone ID
              memset(Rcv_PhoneID,0,sizeof(Rcv_PhoneID));
              strcat(Rcv_PhoneID,tmp); 
              
              if(heatjusttime==1)
              {
                heatjusttime=0;
                
                if((WaterWeight>=5) && (WaterWeight<=20) && (TeaPotHub==1))
                {
                  Rst_Value();
                  WARM_LIGHT(0);
                  Telecontrol=1;  
                  RelayOnTime=0;
                  Heat=1;
                  Boil=Rcv_Boil;
                  Purify=Rcv_Purify; 
                  Pure_Time=Purify*2*60;
                  TeleWarmTime=Rcv_WarmTime; 
                  Warmtemp=Rcv_Warmtemp;

                  RecordTable[RecordNum].operation=1;
                  RecordTable[RecordNum].starttime[0]=THour/10 + 0x30;
                  RecordTable[RecordNum].starttime[1]=THour%10 + 0x30;
                  RecordTable[RecordNum].starttime[2]=TMin/10 + 0x30;
                  RecordTable[RecordNum].starttime[3]=TMin%10 + 0x30;
                  RecordTable[RecordNum].starttime[4]=TSec/10 + 0x30;
                  RecordTable[RecordNum].starttime[5]=TSec%10 + 0x30;
                  RecordTable[RecordNum].starttime[6]=0;
                  RecordTable[RecordNum].level=WaterWeight;
                  RecordTable[RecordNum].temp=Rcv_Warmtemp;
                  RecordTable[RecordNum].boil=Rcv_Boil;
                  RecordTable[RecordNum].purify=Rcv_Purify;
                  RecordTable[RecordNum].keepwarm=Rcv_WarmTime;
                  
                  memset(RecordTable[RecordNum].PhoneID,0,37);
                  strcat(RecordTable[RecordNum].PhoneID,Rcv_PhoneID);             
                  
                  
                  memset(PhoneID,0,sizeof(PhoneID));
                  strcat(PhoneID,Rcv_PhoneID);        
                  if(Rcv_WarmTime>0)
                  {
                    Warm=1;
                    LIGHT2(1);
                  }
                  StateTime=0;
                  Mystate=1;
                  //StateTime=0;
                  DataReturn(3);
                }
                
              }
              else if(Rcv_OrderEnable==1)
              {
                //´æÈëbuffer
                if(Ordernum>16)
                  Ordernum=0;
                 //´æÈëbuffer
                for(i=0;i<16;i++)
                {
                  if(strncmp(OrderTable[i].OrderID,Rcv_OrderID,16)==0)
                    break;
                }
                if(i>=16)
                {
                  OrderTable[Ordernum].Warmtemp=Rcv_Warmtemp;
                  OrderTable[Ordernum].Boil=Rcv_Boil;
                  OrderTable[Ordernum].Purify=Rcv_Purify;
                  OrderTable[Ordernum].WarmTime=Rcv_WarmTime;
                  OrderTable[Ordernum].OrderHour=Rcv_OrderHour;
                  OrderTable[Ordernum].OrderMin=Rcv_OrderMin;
                  OrderTable[Ordernum].OrderSec=Rcv_OrderSec;
                  OrderTable[Ordernum].OrderWeek=Rcv_OrderWeek;
                  strcat(OrderTable[Ordernum].OrderID,Rcv_OrderID);
                  strcat(OrderTable[Ordernum].PhoneID,Rcv_PhoneID);             
                  Ordernum++;
                  if(Ordernum>16)
                  {
                    Ordernum=15;
                    memmove(&OrderTable[0].Warmtemp,&OrderTable[1].Warmtemp,sizeof(HeatInfo)*(15));
                    memset(&OrderTable[15].Warmtemp,0,sizeof(HeatInfo));
                  }
                  write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
                }
                
                DataReturn(1);
                
              }
              else if(Rcv_OrderEnable==0)
              {
                //É¾³ýbuffer
                for(i=0;i<16;i++)
                {
                  if(strcmp(OrderTable[i].OrderID,Rcv_OrderID)==0)
                  {
                    memset(&OrderTable[i].Warmtemp,0,sizeof(HeatInfo));
                    memmove(&OrderTable[i].Warmtemp,&OrderTable[i+1].Warmtemp,sizeof(HeatInfo)*(15-i));
                    memset(&OrderTable[15].Warmtemp,0,sizeof(HeatInfo));
                    if(Ordernum>0)
                      Ordernum--;
                    write_flash(ORDER_START_ADDR,(u16 *)OrderTable,992);
                    break;
                  }
                }                
                
                DataReturn(2);
              }
              
              
              break;         
            
    case 2:  get_parmer(tmp,"GET_HEAT_STATE&ID",CommRcvBuf,'&');     //PhoneID
              memset(Rcv_PhoneID,0,sizeof(Rcv_PhoneID));
              strcat(Rcv_PhoneID,tmp); 
              
              memset(tmp,0,sizeof(tmp));
              strcat(tmp,PhoneID); 
              
              memset(PhoneID,0,sizeof(PhoneID));
              strcat(PhoneID,Rcv_PhoneID);  
              DataReturn(5);
              DelayN10ms(20);
              DataReturn(5);
              DelayN10ms(20);
              DataReturn(5);
              
              memset(PhoneID,0,sizeof(PhoneID));
              strcat(PhoneID,tmp); 
              
              if(FactorSign>0)
              {
                memset(tmp,0,sizeof(tmp));
                if((write_flash(FACTOR_START_ADDR,(u16 *)tmp,2))==0)
                  FactorSign=0; 
                //set_mode(1);
                Connect_Service=1;
                OffLineTime=OFF_LINE_TIME;                
                
                DelayN10ms(500);
                
                for(i=0;i<BOND_TRY_TIME;i++)
                {
                  bFlagOK=0;
                  DataReturn(1);
                  DelayNum10ms=300;                
                  while(bFlagOK==0)
                  {
                    if(DelayNum10ms==0)
                      break;
                  }
                  DelayNum10ms=0;                
                  if(bFlagOK==1)
                  {
                    bFlagOK=0; 
                    DelayN10ms(100);
                    /* Return state */
                    DataReturn(3);
                    bFlagOK=0;
                    DelayNum10ms=200;                
                    while(bFlagOK==0)
                    {
                      if(DelayNum10ms==0)
                        break;
                    }
                    DelayNum10ms=0; 
                    bFlagOK=0; 
                    OffLineTime=OFF_LINE_TIME;
                    break;
                  }
                }                      
              }
              break;    
              
    case 3:   
              Speak(1);
              Finish=1;
              FinishTime=0;
              
              LastTime[0]=0x32;
              LastTime[1]=0x30;
              LastTime[2]=0x30 + TYear/10;
              LastTime[3]=0x30 + TYear%10;
              LastTime[4]=0x30 + TMon/10;
              LastTime[5]=0x30 + TMon%10;
              LastTime[6]=0x30 + TDay/10;
              LastTime[7]=0x30 + TDay%10;
              LastTime[8]=RecordTable[RecordNum].endtime[0]=THour/10 + 0x30;
              LastTime[9]=RecordTable[RecordNum].endtime[1]=THour%10 + 0x30;
              LastTime[10]=RecordTable[RecordNum].endtime[2]=TMin/10 + 0x30;
              LastTime[11]=RecordTable[RecordNum].endtime[3]=TMin%10 + 0x30;
              LastTime[12]=RecordTable[RecordNum].endtime[4]=TSec/10 + 0x30;
              LastTime[13]=RecordTable[RecordNum].endtime[5]=TSec%10 + 0x30;
              LastTime[14]=RecordTable[RecordNum].endtime[6]=0;
              RecordTable[RecordNum].energy=((RelayOnTime/100)*TEAPOTPOWER)/3600;
              RecordNum++;
              if(RecordNum>10)
                RecordNum=9;                
              
              DataReturn(6);
              Rst_Value();
              WARM_LIGHT(0);
              DataReturn(4);
              DataReturn(5);              
              break;
              
    case 4:  get_parmer(tmp,"BEIJINGTIME",CommRcvBuf,'&');     //BEIJINGTIME
              //set time;
              RTC_ITConfig(RTC_IT_SEC, DISABLE);
              TWeek=(tmp[1]-0x30);
              TYear=(tmp[2]-0x30)*10+(tmp[3]-0x30);
              TMon =(tmp[4]-0x30)*10+(tmp[5]-0x30);
              TDay =(tmp[6]-0x30)*10+(tmp[7]-0x30);
              THour=(tmp[8]-0x30)*10+(tmp[9]-0x30);
              TMin =(tmp[10]-0x30)*10+(tmp[11]-0x30);
              TSec =(tmp[12]-0x30)*10+(tmp[13]-0x30);
              
              count=THour*3600 + TMin*60 + TSec + 1;
              RTC_WaitForLastTask();
              RTC_SetCounter(count);
              RTC_WaitForLastTask();               
              
              RTC_ITConfig(RTC_IT_SEC, ENABLE);
              break;
              
    case 5:  get_parmer(tmp,"MODE",CommRcvBuf,'&'); 
              if(tmp[0]=='0')
              {
                DataReturn(8);  
                TryConnectWanTime=CONNECT_WAN_TIME;
              }
              else if(tmp[0]=='1')
              {
                DataReturn(8); 
                OffLineTime=OFF_LINE_TIME;
                Connect_Service=1;
              }
      
    default: 
              break;      
      
    }
    
    bFlagOK=0;
  }
  
  else if((bFlagOK==1) && (Connect_Service==1))   // Connect_Service
  {
    OffLineTime=OFF_LINE_TIME;
    //http_send("machineid=01201409101830150001&operation=1&starttime=100000&endtime=103000&level=1.2L&temp=80C&boil=0&purify=1&keepwarm=25");
    bFlagOK=0;
  }
  
}

void DataReturn(u8 num)
{
  u8 data_buffer[10];
  u16 i;
  if(Connect_Service==0)
  {
   switch(num)
   {
    case 1:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=1&ORDEROK\r\n");
            break;
        
    case 2:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=2&CANCELORDEROK\r\n");
            break;
             
    case 3:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=3&LEVEL=");
            
            memset(data_buffer,0,sizeof(data_buffer));  //L
            data_buffer[0]=WaterWeight/10+0x30;
            data_buffer[1]='.';
            data_buffer[2]=WaterWeight%10+0x30;            
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"L&TEMP=");
            
            memset(data_buffer,0,sizeof(data_buffer));  //C
            if(WaterTemp>=100)
            {
              data_buffer[0]=WaterTemp/100 + 0x30;
              data_buffer[1]=WaterTemp%100/10 +0x30;
              data_buffer[2]=WaterTemp%10 + 0x30;
            }
            else if(WaterTemp>=10)
            {
              data_buffer[0]=WaterTemp/10 +0x30;
              data_buffer[1]=WaterTemp%10 + 0x30;
            }
            else
            {
              data_buffer[0]=WaterTemp%10 +0x30;
            }
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"C&STATE=");
            memset(data_buffer,0,sizeof(data_buffer));  //state
            data_buffer[0]=Mystate + 0x30;
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"&STATETIME=");
            memset(data_buffer,0,sizeof(data_buffer));  //STATETIME
            data_buffer[0]=0x30+StateTime/1000;
            data_buffer[1]=0x30+StateTime%1000/100;
            data_buffer[2]=0x30+StateTime%1000%100/10;
            data_buffer[3]=0x30+StateTime%10;            
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"S&ID=");            //phoneID
            strcat(UartSend_Buffer3,PhoneID);
            strcat(UartSend_Buffer3,"\r\n");
            break;
            
    case 4:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=4&HEAT_COMPLETE&ID=");
            strcat(UartSend_Buffer3,PhoneID);
            strcat(UartSend_Buffer3,"\r\n");
            break;
            
    case 5:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=5&LEVEL=");
            
            memset(data_buffer,0,sizeof(data_buffer));  //L
            data_buffer[0]=WaterWeight/10+0x30;
            data_buffer[1]='.';
            data_buffer[2]=WaterWeight%10+0x30;            
            strcat(UartSend_Buffer3,data_buffer);
            strcat(UartSend_Buffer3,"L&TEMP=");
            
            memset(data_buffer,0,sizeof(data_buffer));  //C
            if(WaterTemp>=100)
            {
              data_buffer[0]=WaterTemp/100 + 0x30;
              data_buffer[1]=WaterTemp%100/10 +0x30;
              data_buffer[2]=WaterTemp%10 + 0x30;
            }
            else if(WaterTemp>=10)
            {
              data_buffer[0]=WaterTemp/10 +0x30;
              data_buffer[1]=WaterTemp%10 + 0x30;
            }
            else
            {
              data_buffer[0]=WaterTemp%10 +0x30;
            }
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"C&HUB=");            
            memset(data_buffer,0,sizeof(data_buffer)); //hub
            data_buffer[0]=TeaPotHub + 0x30;
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"&STATE=");        //state
            memset(data_buffer,0,sizeof(data_buffer));  
            data_buffer[0]=Mystate + 0x30;
            strcat(UartSend_Buffer3,data_buffer);
            
            strcat(UartSend_Buffer3,"&LASTTIME=");    //LastTime            
            strcat(UartSend_Buffer3,LastTime); 
            
            strcat(UartSend_Buffer3,"&ID=");          //phoneID
            strcat(UartSend_Buffer3,PhoneID);
            
            strcat(UartSend_Buffer3,"&MACHINEID=");  //MACHINEID
            strcat(UartSend_Buffer3,MachineID);
            
            strcat(UartSend_Buffer3,"\r\n");
            break;
            
            
    case 6:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=6&STOPHEAT\r\n");
            break;
            
    case 7:   memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=7&GET_TIME\r\n");
            break;
            
    case 8:  memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
            strcat(UartSend_Buffer3,"&&KEY2=8&OK\r\n");
            break;
    default:
            break;
    
    }
   
    i=0;
    while(UartSend_Buffer3[i]!=0)
    {
      USART_SendData(USART3, UartSend_Buffer3[i]);
      i++;
      while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    }
  }
  
  else if(Connect_Service==1)
  {
    u8 StatusBuff[200];
    switch(num)
    {
      case 1:       // ×¢²á£»
                 memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID);
                 http_send(StatusBuff,"/machine/reg");
                 break;
                 
      case 3:         //·µ»Øµ±Ç°×´Ì¬  
                 memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID); 
                 
                 strcat(StatusBuff,"&appid=");              //appid 
                 strcat(StatusBuff,PhoneID);                  
                 
                 strcat(StatusBuff,"&level=");              //level  
                 memset(data_buffer,0,sizeof(data_buffer));  
                 data_buffer[0]=WaterWeight/10+0x30;
                 data_buffer[1]='.';
                 data_buffer[2]=WaterWeight%10+0x30;            
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"L&temp=");               //temp
                 memset(data_buffer,0,sizeof(data_buffer));  
                 if(WaterTemp>=100)
                 {
                   data_buffer[0]=WaterTemp/100 + 0x30;
                   data_buffer[1]=WaterTemp%100/10 +0x30;
                   data_buffer[2]=WaterTemp%10 + 0x30;
                 }
                 else if(WaterTemp>=10)
                 {
                   data_buffer[0]=WaterTemp/10 +0x30;
                   data_buffer[1]=WaterTemp%10 + 0x30;
                 }
                 else
                 {
                   data_buffer[0]=WaterTemp%10 +0x30;
                 }
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"C&hub=");               //hub
                 memset(data_buffer,0,sizeof(data_buffer)); 
                 data_buffer[0]=TeaPotHub + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"&state=");            //state
                 memset(data_buffer,0,sizeof(data_buffer));  
                 data_buffer[0]=Mystate + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 http_send(StatusBuff,"/teapot/updatestate");
                 break;
                 

      case 2:    //Ê¹ÓÃ¼ÇÂ¼
                 memset(StatusBuff,0,sizeof(StatusBuff));            //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID); 
                 
                 strcat(StatusBuff,"&appid=");                       //appid
                 if(strlen(RecordTable[0].PhoneID)==0)
                   strcat(StatusBuff,PhoneID);
                 else
                   strcat(StatusBuff,RecordTable[0].PhoneID);  
                 
                 strcat(StatusBuff,"&operation=");                  //opration
                 memset(data_buffer,0,sizeof(data_buffer)); 
                 data_buffer[0]=RecordTable[0].operation + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"&starttime=");                  //starttime
                 strcat(StatusBuff,RecordTable[0].starttime); 
                 
                 strcat(StatusBuff,"&endtime=");                   //endtime
                 strcat(StatusBuff,RecordTable[0].endtime); 
                                  
                 strcat(StatusBuff,"&level=");                     //level  
                 memset(data_buffer,0,sizeof(data_buffer));  
                 data_buffer[0]=RecordTable[0].level/10+0x30;
                 data_buffer[1]='.';
                 data_buffer[2]=RecordTable[0].level%10+0x30;            
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"L&temp=");                   //temp
                 memset(data_buffer,0,sizeof(data_buffer));  
                 if(RecordTable[0].temp>=100)
                 {
                   data_buffer[0]=RecordTable[0].temp/100 + 0x30;
                   data_buffer[1]=RecordTable[0].temp%100/10 +0x30;
                   data_buffer[2]=RecordTable[0].temp%10 + 0x30;
                 }
                 else if(RecordTable[0].temp>=10)
                 {
                   data_buffer[0]=RecordTable[0].temp/10 +0x30;
                   data_buffer[1]=RecordTable[0].temp%10 + 0x30;
                 }
                 else
                 {
                   data_buffer[0]=RecordTable[0].temp%10 +0x30;
                 }
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"C&boil=");               //boil
                 memset(data_buffer,0,sizeof(data_buffer)); 
                 data_buffer[0]=RecordTable[0].boil + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"&purify=");            //purify
                 if(RecordTable[0].purify>=10)
                 {
                   data_buffer[0]=RecordTable[0].purify/10 + 0x30;
                   data_buffer[1]=RecordTable[0].purify%10 + 0x30;
                 }
                 else
                   data_buffer[0]=RecordTable[0].purify + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 
                 strcat(StatusBuff,"&keepwarm=");            //keepwarm
                 memset(data_buffer,0,sizeof(data_buffer));  
                 if(RecordTable[0].keepwarm>=10)
                 {
                   data_buffer[0]=RecordTable[0].keepwarm/10 + 0x30;
                   data_buffer[1]=RecordTable[0].keepwarm%10 + 0x30;
                 }
                 else
                   data_buffer[0]=RecordTable[0].keepwarm + 0x30;
                 
                 strcat(StatusBuff,data_buffer);
                 
                 strcat(StatusBuff,"&energy=");            //energy
                 memset(data_buffer,0,sizeof(data_buffer));  
                 i=0;
                 if((RecordTable[0].energy/10000)>0)
                 {
                   data_buffer[i]=RecordTable[0].energy/10000 + 0x30;
                   i++;
                 }                 
                 data_buffer[i]=RecordTable[0].energy%10000/1000 + 0x30;
                 i++;                 
                 data_buffer[i]='.';
                 i++;                 
                 data_buffer[i]=RecordTable[0].energy%1000/100 + 0x30;
                 i++;                 
                 data_buffer[i]=RecordTable[0].energy%100/10 + 0x30;
                 i++;                 
                 data_buffer[i]=RecordTable[0].energy%10 + 0x30;
                 i++;                 
                 data_buffer[i]='K';
                 i++;
                 data_buffer[i]='W';
                 i++;
                 strcat(StatusBuff,data_buffer); 
                 
                 http_send(StatusBuff,"/teapot/actionlog");
                 break;
                 
      case 4:    //»ñÈ¡ÇëÇó
                 memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID);
                 
                 strcat(StatusBuff,"&page=1&pagesize=1"); 
                 
                 http_send(StatusBuff,"/teapot/request");
                 break;
                
      case 5:   //·µ»ØÇëÇó½á¹û1
                 memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID);
                 
                 strcat(StatusBuff,"&orderid="); 
                 strcat(StatusBuff,Orderid);
                 
                 strcat(StatusBuff,"&result=orderok"); 
                 
                 http_send(StatusBuff,"/teapot/requestresult");
                 break;
             
      case 6:   //·µ»ØÇëÇó½á¹û1
                 memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID);
                 
                 strcat(StatusBuff,"&orderid="); 
                 strcat(StatusBuff,Orderid);
                 
                 strcat(StatusBuff,"&result=cancelorderok"); 
                 
                 http_send(StatusBuff,"/teapot/requestresult");
                 break;
                 
      case 7:    memset(StatusBuff,0,sizeof(StatusBuff));  //machineid
                 strcat(StatusBuff,"machineid="); 
                 strcat(StatusBuff,MachineID);
                 
                 strcat(StatusBuff,"&appid=");              //appid 
                 strcat(StatusBuff,PhoneID); 
                 
                 strcat(StatusBuff,"&orderid=");            // orderid
                 strcat(StatusBuff,Orderid);
                 
                 strcat(StatusBuff,"&state=");             //state
                 memset(data_buffer,0,sizeof(data_buffer));  
                 data_buffer[0]=OrderOperState + 0x30;
                 strcat(StatusBuff,data_buffer);
                 
                 http_send(StatusBuff,"/teapot/runtime");
                 break;
                 
                 
      default:
                 break;
    }
  }
  
  
  
}
 
void http_send(u8 *sendbuf,u8 *path)
{
  u16 length,i;
  u8 data_buffer[4];
  
  memset(UartSend_Buffer3,0,sizeof(UartSend_Buffer3));
  
  strcat(UartSend_Buffer3,"POST ");
  strcat(UartSend_Buffer3, path);
  strcat(UartSend_Buffer3," HTTP/1.1\r\n");
  strcat(UartSend_Buffer3,"Host: api.sunyie.com:8081\r\n");
  strcat(UartSend_Buffer3,"Content-Type: application/x-www-form-urlencoded\r\n");
  strcat(UartSend_Buffer3,"Content-Length: ");
  length=strlen(sendbuf);
  memset(data_buffer,0,sizeof(data_buffer));  //data length
  if(length>=100)
  {
    data_buffer[0]=length/100 + 0x30;
    data_buffer[1]=length%100/10 +0x30;
    data_buffer[2]=length%10 + 0x30;
  }
  else if(length>=10)
  {
    data_buffer[0]=length/10 +0x30;
    data_buffer[1]=length%10 + 0x30;
  }
  else
  {
    data_buffer[0]=length%10 +0x30;
  }
  
  strcat(UartSend_Buffer3,data_buffer);
  strcat(UartSend_Buffer3,"\r\n");
  strcat(UartSend_Buffer3,"Connection: close\r\n\r\n");
  
  strcat(UartSend_Buffer3,sendbuf);
  
  
  i=0;
  while(UartSend_Buffer3[i]!=0)
  {
    USART_SendData(USART3, UartSend_Buffer3[i]);
    i++;
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
  }
}

void Rst_Value(void)
{
  RELAY(0);
  RelayOn=0;
  Heat=0;
  Purify=0;
  Boil=0;
  Warmheat=0;
  HeatCRC=0;
  Warm=0;
  EnCool=0;
  Warmtemp=0;
  WarmEnable=0;
  WarmTime=0;
  Mystate=0;
  HeatCRCTime=0;
  WarmOK=0;
  Telecontrol=0;
  Keycontrol=0;
  LIGHTHEATOFF;
  StateTime=0;
  OrderOperState=0;
}

void set_mode(u8 mode)
{
    cmdmode=1;  
    DelayN10ms(100); 
    UART3_Send_Missage("+++");
    DelayN10ms(50); 
    
    while(ModeReadOk==0)
    {
      UART3_Send_Missage("setmode");
      DelayN10ms(30);
    }
    ModeReadOk=0;
    
    if(mode!=WifiMode)
    {
      if(mode==0)
        UART3_Send_Missage("setmode 0");
      else if(mode==1)
        UART3_Send_Missage("setmode 1");
      DelayN10ms(20);
    
      UART3_Send_Missage("saveconfig");
      DelayN10ms(100);
    
      UART3_Send_Missage("reboot");
      DelayN10ms(100);
      DelayN10ms(100);
      WaitConnect();
    } 
    else
    {
      while(WifiConnectok==0)
      {
        UART3_Send_Missage("connstatus");
        DelayN10ms(50);   
      }
      WifiConnectok=0;
      UART3_Send_Missage("quit");
      DelayN10ms(20);     
    }
    cmdmode=0;    
    OffLineTime=OFF_LINE_TIME;
    Connect_Service=mode;
}

void DelayN10ms(u16 time)
{
  DelayNum10ms=time;
  while(DelayNum10ms!=0);
}

void WaitConnect(void)
{
    u16 k;
    
    cmdmode=1;
    DelayN10ms(700);
    UART3_Send_Missage("+++");
    DelayN10ms(50);
    k=0;
    while(WifiConnectok==0)
    {
      UART3_Send_Missage("connstatus");
      DelayN10ms(50);
      k++;
      if(k>=120)    //1min
      {
        WifiLedCtl(0);
        break;
      }        
      if(Factor_Set_Sign==1)
        break;
    }
    WifiLedCtl(1);
    WifiConnectok=0;
    UART3_Send_Missage("quit");
    DelayN10ms(20);
    
    cmdmode=0;
}
#ifdef  DEBUG
/*******************************************************************************
* Function Name  : assert_failed
* Description    : Reports the name of the source file and the source line number
*                  where the assert_param error has occurred.
* Input          : - file: pointer to the source file name
*                  - line: assert_param error line source number
* Output         : None
* Return         : None
*******************************************************************************/
void assert_failed(u8* file, u32 line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif

/******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/
